---
swagger: "2.0"
info:
  description: "One way to interact with the Slack platform is its HTTP RPC-based\
    \ Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace\
    \ tokens blessed with related OAuth scopes."
  version: "1.0.5"
  title: "Slack Web API"
host: "slack.com"
basePath: "/api"
schemes:
- "https"
paths:
  /chat.delete:
    post:
      tags:
      - "chat"
      description: "Deletes a message."
      operationId: "chat_delete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "as_user"
        in: "formData"
        description: "Pass true to delete the message as the authed user with `chat:write:user`\
          \ scope. [Bot users](/bot-users) in this context are considered authed users.\
          \ If unused or false, the message will be deleted with `chat:write:bot`\
          \ scope."
        required: false
        type: "boolean"
        x-exportParamName: "AsUser"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the message to be deleted."
        required: false
        type: "number"
        x-exportParamName: "Ts"
      - name: "channel"
        in: "formData"
        description: "Channel containing the message to be deleted."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/chat.delete success schema"
          examples:
            application/json:
              ok: true
              ts: "1401383885.000061"
              channel: "C024BE91L"
        default:
          description: "Typical error response"
          examples:
            application/json:
              ok: false
              error: "message_not_found"
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.delete"
  /files.comments.edit:
    post:
      tags:
      - "files.comments"
      - "files"
      description: "Edit an existing file comment."
      operationId: "files_comments_edit"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "comment"
        in: "formData"
        description: "Text of the comment to edit."
        required: false
        type: "string"
        x-exportParamName: "Comment"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "id"
        in: "formData"
        description: "The comment to edit."
        required: false
        type: "string"
        x-exportParamName: "Id"
      - name: "file"
        in: "formData"
        description: "File containing the comment to edit."
        required: false
        type: "string"
        x-exportParamName: "File"
      responses:
        200:
          description: "Standard success response when used with a user token"
          schema:
            $ref: "#/definitions/files.comments.edit schema"
          examples:
            application/json:
              user_id: "W12345678"
              url: "https://subarachnoid.slack.com/"
              team_id: "T12345678"
              user: "grace"
              team: "Subarachnoid Workspace"
              ok: true
        default:
          description: "Standard failure response when used with an invalid token"
          schema:
            $ref: "#/definitions/files.comments.edit error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.comments.edit"
  /mpim.open:
    post:
      tags:
      - "mpim"
      description: "This method opens a multiparty direct message."
      operationId: "mpim_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `mpim:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "users"
        in: "formData"
        description: "Comma separated lists of users.  The ordering of the users is\
          \ preserved whenever a MPIM group is returned."
        required: false
        type: "string"
        x-exportParamName: "Users"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/mpim.open success schema"
          examples:
            application/json:
              ok: true
              channel:
                id: "D024BFF1M"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/mpim.open error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.open"
  /groups.replies:
    get:
      tags:
      - "groups"
      description: "Retrieve a thread of messages posted to a private channel"
      operationId: "groups_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "query"
        description: "Unique identifier of a thread's parent message"
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `groups:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "query"
        description: "Private channel to fetch thread from"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              messages:
              - text: "Hello"
                type: "message"
                ts: "1358546515.000008"
                user: "U2147483896"
              - text: "World"
                is_starred: true
                type: "message"
                ts: "1358546515.000007"
                user: "U2147483896"
              - type: "something_else"
                ts: "1358546515.000007"
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "groups:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.replies"
  /bots.info:
    get:
      tags:
      - "bots"
      description: "Gets information about a bot user."
      operationId: "bots_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "bot"
        in: "query"
        description: "Bot user to get info on"
        required: false
        type: "string"
        x-exportParamName: "Bot"
      responses:
        200:
          description: "When successful, returns bot info by bot ID."
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              bot:
                updated: 1449272004
                name: "commandeer"
                icons:
                  image_36: "https://..."
                  image_48: "https://..."
                  image_72: "https://..."
                deleted: false
                app_id: "A061BLERW"
                id: "B061F7JQ1"
              ok: true
        default:
          description: "When no bot can be found, it returns an error."
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "bot_not_found"
      security:
      - slackAuth:
        - "users:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/bots.info"
  /reminders.add:
    post:
      tags:
      - "reminders"
      description: "Creates a reminder."
      operationId: "reminders_add"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "text"
        in: "formData"
        description: "The content of the reminder"
        required: false
        type: "string"
        x-exportParamName: "Text"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reminders:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "formData"
        description: "The user who will receive the reminder. If no user is specified,\
          \ the reminder will go to user who created it."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "time"
        in: "formData"
        description: "When this reminder should happen: the Unix timestamp (up to\
          \ five years from now), the number of seconds until the reminder (if within\
          \ 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or\
          \ \"every Thursday\")"
        required: false
        type: "string"
        x-exportParamName: "Time"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "reminders:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.add"
  /groups.rename:
    post:
      tags:
      - "groups"
      description: "Renames a private channel."
      operationId: "groups_rename"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "name"
        in: "formData"
        description: "New name for private channel."
        required: false
        type: "string"
        x-exportParamName: "Name"
      - name: "channel"
        in: "formData"
        description: "Private channel to rename"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.rename"
  /users.profile.set:
    post:
      tags:
      - "users.profile"
      - "users"
      description: "Set the profile information for a user."
      operationId: "users_profile_set"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "profile"
        in: "formData"
        description: "Collection of key:value pairs presented as a URL-encoded JSON\
          \ hash."
        required: false
        type: "string"
        x-exportParamName: "Profile"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `users.profile:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "formData"
        description: "ID of user to change. This argument may only be specified by\
          \ team admins on paid teams."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "value"
        in: "formData"
        description: "Value to set a single key to. Usable only if `profile` is not\
          \ passed."
        required: false
        type: "string"
        x-exportParamName: "Value"
      - name: "name"
        in: "formData"
        description: "Name of a single key to set. Usable only if `profile` is not\
          \ passed."
        required: false
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              profile:
                display_name: "spengler"
                status_emoji: ":books:"
                team: "T012AB3C4"
                real_name: "Egon Spengler"
                image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                real_name_normalized: "Egon Spengler"
                image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                display_name_normalized: "spengler"
                image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                avatar_hash: "ge3b51ca72de"
                status_text: "Print is dead"
                email: "spengler@ghostbusters.example.com"
                image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_profile"
      security:
      - slackAuth:
        - "users.profile:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.profile.set"
  /users.setPresence:
    post:
      tags:
      - "users"
      description: "Manually sets user presence."
      operationId: "users_setPresence"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `users:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "presence"
        in: "formData"
        description: "Either `auto` or `away`"
        required: false
        type: "string"
        x-exportParamName: "Presence"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "users:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.setPresence"
  /conversations.close:
    post:
      tags:
      - "conversations"
      description: "Closes a direct message or multi-person direct message."
      operationId: "conversations_close"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Conversation to close."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.close success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/conversations.close error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.close"
  /im.open:
    post:
      tags:
      - "im"
      description: "Opens a direct message channel."
      operationId: "im_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `im:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "return_im"
        in: "formData"
        description: "Boolean, indicates you want the full IM channel definition in\
          \ the response."
        required: false
        type: "boolean"
        x-exportParamName: "ReturnIm"
      - name: "user"
        in: "formData"
        description: "User to open a direct message channel with."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "include_locale"
        in: "formData"
        description: "Set this to `true` to receive the locale for this im. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/im.open success schema"
          examples:
            application/json:
              ok: true
              channel:
                id: "D947RLWRX"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/im.open error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "im:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.open"
  /groups.list:
    get:
      tags:
      - "groups"
      description: "Lists private channels that the calling user has access to."
      operationId: "groups_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "exclude_members"
        in: "query"
        description: "Exclude the `members` from each `group`"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeMembers"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `groups:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "exclude_archived"
        in: "query"
        description: "Don't return archived private channels."
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeArchived"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/groups.list success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/groups.list error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.list"
  /team.integrationLogs:
    get:
      tags:
      - "team"
      description: "Gets the integration logs for the current team."
      operationId: "team_integrationLogs"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
      - name: "change_type"
        in: "query"
        description: "Filter logs with this change type. Defaults to all logs."
        required: false
        type: "string"
        x-exportParamName: "ChangeType"
      - name: "app_id"
        in: "query"
        description: "Filter logs to this Slack app. Defaults to all logs."
        required: false
        type: "integer"
        x-exportParamName: "AppId"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `admin`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "query"
        description: "Filter logs generated by this user’s actions. Defaults to all\
          \ logs."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "service_id"
        in: "query"
        description: "Filter logs to this service. Defaults to all logs."
        required: false
        type: "integer"
        x-exportParamName: "ServiceId"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "admin"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.integrationLogs"
  /groups.kick:
    post:
      tags:
      - "groups"
      description: "Removes a user from a private channel."
      operationId: "groups_kick"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "formData"
        description: "User to remove from private channel."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "channel"
        in: "formData"
        description: "Private channel to remove user from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.kick"
  /dnd.info:
    get:
      tags:
      - "dnd"
      description: "Retrieves a user's current Do Not Disturb status."
      operationId: "dnd_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `dnd:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "query"
        description: "User to fetch status for (defaults to current user)"
        required: false
        type: "string"
        x-exportParamName: "User"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "dnd:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.info"
  /channels.archive:
    post:
      tags:
      - "channels"
      description: "Archives a channel."
      operationId: "channels_archive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Channel to archive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/channels.archive success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/channels.archive error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.archive"
  /reminders.info:
    get:
      tags:
      - "reminders"
      description: "Gets information about a reminder."
      operationId: "reminders_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `reminders:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "reminder"
        in: "query"
        description: "The ID of the reminder"
        required: false
        type: "string"
        x-exportParamName: "Reminder"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "reminders:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.info"
  /channels.info:
    get:
      tags:
      - "channels"
      description: "Gets information about a channel."
      operationId: "channels_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `channels:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for this channel. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
      - name: "channel"
        in: "query"
        description: "Channel to get info on"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/channels.info success schema"
          examples:
            application/json:
              ok: true
              channel:
                topic:
                  last_set: 1503435128
                  value: "Spiritual containment strategies"
                  creator: "U0G9QF9C6"
                is_general: false
                name_normalized: "busting"
                name: "busting"
                is_channel: true
                created: 1466025154
                is_member: true
                is_mpim: false
                is_archived: false
                creator: "U0G9QF9C6"
                is_org_shared: false
                unread_count: 1
                previous_names:
                - "dusting"
                purpose:
                  last_set: 1503435128
                  value: "Discuss busting ghosts"
                  creator: "U0G9QF9C6"
                unread_count_display: 1
                last_read: "1503435939.000101"
                latest:
                  username: "ecto1138"
                  attachments:
                  - text: "Don't get too attached"
                    fallback: "This is an attachment fallback"
                    id: 1
                  text: "Containment unit is 98% full"
                  ts: "1503435956.000247"
                  subtype: "bot_message"
                  type: "message"
                  bot_id: "B19LU7CSY"
                members:
                - "U0G9QF9C6"
                - "U1QNSQB9U"
                id: "C1H9RESGL"
                is_private: false
                is_shared: false
        default:
          description: "Error response when the specified channel cannot be found"
          schema:
            $ref: "#/definitions/channels.info error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "channels:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.info"
  /channels.kick:
    post:
      tags:
      - "channels"
      description: "Removes a user from a channel."
      operationId: "channels_kick"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "formData"
        description: "User to remove from channel."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "channel"
        in: "formData"
        description: "Channel to remove user from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "not_in_channel"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.kick"
  /groups.mark:
    post:
      tags:
      - "groups"
      description: "Sets the read cursor in a private channel."
      operationId: "groups_mark"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the most recently seen message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
      - name: "channel"
        in: "formData"
        description: "Private channel to set reading cursor in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/groups.mark success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/groups.mark error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.mark"
  /mpim.close:
    post:
      tags:
      - "mpim"
      description: "Closes a multiparty direct message channel."
      operationId: "mpim_close"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `mpim:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "MPIM to close."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.close"
  /users.profile.get:
    get:
      tags:
      - "users.profile"
      - "users"
      description: "Retrieves a user's profile information."
      operationId: "users_profile_get"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users.profile:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "include_labels"
        in: "query"
        description: "Include labels for each ID in custom profile fields"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLabels"
      - name: "user"
        in: "query"
        description: "User to retrieve profile info for"
        required: false
        type: "string"
        x-exportParamName: "User"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              profile:
                display_name: "spengler"
                status_emoji: ":books:"
                team: "T012AB3C4"
                real_name: "Egon Spengler"
                image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                real_name_normalized: "Egon Spengler"
                image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                display_name_normalized: "spengler"
                image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                avatar_hash: "ge3b51ca72de"
                status_text: "Print is dead"
                email: "spengler@ghostbusters.example.com"
                image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "user_not_found"
      security:
      - slackAuth:
        - "users.profile:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.profile.get"
  /channels.history:
    get:
      tags:
      - "channels"
      description: "Fetches history of messages and events from a channel."
      operationId: "channels_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of messages to return, between 1 and 1000."
        required: false
        type: "integer"
        x-exportParamName: "Count"
      - name: "unreads"
        in: "query"
        description: "Include `unread_count_display` in the output?"
        required: false
        type: "boolean"
        x-exportParamName: "Unreads"
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `channels:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
      - name: "channel"
        in: "query"
        description: "Channel to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
      responses:
        200:
          description: "Typical success response containing the channel's history"
          schema:
            $ref: "#/definitions/channels.history success schema"
          examples:
            application/json:
              has_more: false
              messages:
              - text: "Hello"
                type: "message"
                ts: "1358546515.000008"
                user: "U2147483896"
              - reactions:
                - count: 3
                  name: "space_invader"
                  users:
                  - "U1"
                  - "U2"
                  - "U3"
                - count: 5
                  name: "sweet_potato"
                  users:
                  - "U1"
                  - "U2"
                  - "U3"
                  - "U4"
                  - "U5"
                text: "World"
                ts: "1358546515.000007"
                user: "U2147483896"
                is_starred: true
                type: "message"
              - type: "something_else"
                ts: "1358546515.000007"
              - username: "ecto1138"
                attachments:
                - text: "Don't get too attached"
                  fallback: "This is an attachment fallback"
                  id: 1
                text: "Containment unit is 98% full"
                ts: "1503435956.000247"
                subtype: "bot_message"
                type: "message"
                bot_id: "B19LU7CSY"
              ok: true
              latest: "1358547726.000003"
        default:
          description: "Error response when the specified channel cannot be found"
          schema:
            $ref: "#/definitions/channels.history error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "channels:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.history"
  /im.mark:
    post:
      tags:
      - "im"
      description: "Sets the read cursor in a direct message channel."
      operationId: "im_mark"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `im:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the most recently seen message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
      - name: "channel"
        in: "formData"
        description: "Direct message channel to set reading cursor in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/im.mark success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/im.mark error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "im:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.mark"
  /oauth.token:
    get:
      tags:
      - "oauth"
      description: "Exchanges a temporary OAuth verifier code for a workspace token."
      operationId: "oauth_token"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "client_secret"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientSecret"
      - name: "code"
        in: "query"
        description: "The `code` param returned via the OAuth callback."
        required: false
        type: "string"
        x-exportParamName: "Code"
      - name: "single_channel"
        in: "query"
        description: "Request the user to add your app only to a single channel."
        required: false
        type: "boolean"
        x-exportParamName: "SingleChannel"
      - name: "client_id"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
      - name: "redirect_uri"
        in: "query"
        description: "This must match the originally submitted URI (if one was sent)."
        required: false
        type: "string"
        x-exportParamName: "RedirectUri"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/oauth.token"
  /files.upload:
    post:
      tags:
      - "files"
      description: "Uploads or creates a file."
      operationId: "files_upload"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "channels"
        in: "formData"
        description: "Comma-separated list of channel names or IDs where the file\
          \ will be shared."
        required: false
        type: "string"
        x-exportParamName: "Channels"
      - name: "title"
        in: "formData"
        description: "Title of file."
        required: false
        type: "string"
        x-exportParamName: "Title"
      - name: "initial_comment"
        in: "formData"
        description: "Initial comment to add to file."
        required: false
        type: "string"
        x-exportParamName: "InitialComment"
      - name: "filetype"
        in: "formData"
        description: "A [file type](/types/file#file_types) identifier."
        required: false
        type: "string"
        x-exportParamName: "Filetype"
      - name: "filename"
        in: "formData"
        description: "Filename of file."
        required: false
        type: "string"
        x-exportParamName: "Filename"
      - name: "content"
        in: "formData"
        description: "File contents via a POST variable. If omitting this parameter,\
          \ you must provide a `file`."
        required: false
        type: "string"
        x-exportParamName: "Content"
      - name: "token"
        in: "formData"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "formData"
        description: "File contents via `multipart/form-data`. If omitting this parameter,\
          \ you must submit `content`."
        required: false
        type: "string"
        x-exportParamName: "File"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/files.upload schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/files.upload error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.upload"
  /usergroups.users.list:
    get:
      tags:
      - "usergroups.users"
      - "usergroups"
      description: "List all users in a User Group"
      operationId: "usergroups_users_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `usergroups:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "include_disabled"
        in: "query"
        description: "Allow results that involve disabled User Groups."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeDisabled"
      - name: "usergroup"
        in: "query"
        description: "The encoded ID of the User Group to update."
        required: false
        type: "string"
        x-exportParamName: "Usergroup"
      responses:
        200:
          description: "Standard success response when used with a user token"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
              users:
              - "U060R4BJ4"
              - "W123A4BC5"
        default:
          description: "Standard failure response when used with an invalid token"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "usergroups:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.users.list"
  /users.info:
    get:
      tags:
      - "users"
      description: "Gets information about a user."
      operationId: "users_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for this user. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "query"
        description: "User to get info on"
        required: false
        type: "string"
        x-exportParamName: "User"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/users.info success schema"
          examples:
            application/json:
              ok: true
              user:
                profile:
                  display_name: "spengler"
                  status_emoji: ":books:"
                  team: "T012AB3C4"
                  real_name: "Egon Spengler"
                  image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  real_name_normalized: "Egon Spengler"
                  image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  display_name_normalized: "spengler"
                  image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  avatar_hash: "ge3b51ca72de"
                  status_text: "Print is dead"
                  email: "spengler@ghostbusters.example.com"
                  image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                updated: 1502138686
                tz: "America/Los_Angeles"
                name: "spengler"
                deleted: false
                is_app_user: false
                is_bot: false
                tz_label: "Pacific Daylight Time"
                real_name: "Egon Spengler"
                color: "9f69e7"
                team_id: "T012AB3C4"
                is_admin: true
                is_ultra_restricted: false
                is_restricted: false
                is_owner: false
                tz_offset: -25200
                has_2fa: false
                id: "W012A3CDE"
                is_primary_owner: false
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/users.info error schema"
          examples:
            application/json:
              ok: false
              error: "user_not_found"
      security:
      - slackAuth:
        - "users:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.info"
  /users.lookupByEmail:
    get:
      tags:
      - "users"
      description: "Find a user with an email address."
      operationId: "users_lookupByEmail"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read.email`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "email"
        in: "query"
        description: "An email address belonging to a user in the workspace"
        required: false
        type: "string"
        x-exportParamName: "Email"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/users.lookupByEmail success schema"
          examples:
            application/json:
              ok: true
              user:
                profile:
                  display_name: "spengler"
                  status_emoji: ":books:"
                  team: "T012AB3C4"
                  real_name: "Egon Spengler"
                  image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  real_name_normalized: "Egon Spengler"
                  image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  display_name_normalized: "spengler"
                  image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  avatar_hash: "ge3b51ca72de"
                  status_text: "Print is dead"
                  email: "spengler@ghostbusters.example.com"
                  image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                updated: 1502138686
                tz: "America/Los_Angeles"
                name: "spengler"
                deleted: false
                is_app_user: false
                is_bot: false
                tz_label: "Pacific Daylight Time"
                real_name: "Egon Spengler"
                color: "9f69e7"
                team_id: "T012AB3C4"
                is_admin: true
                is_ultra_restricted: false
                is_restricted: false
                is_owner: false
                tz_offset: -25200
                has_2fa: false
                id: "W012A3CDE"
                is_primary_owner: false
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/users.lookupByEmail error schema"
          examples:
            application/json:
              ok: false
              error: "users_not_found"
      security:
      - slackAuth:
        - "users:read.email"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.lookupByEmail"
  /reactions.list:
    get:
      tags:
      - "reactions"
      description: "Lists reactions made by a user."
      operationId: "reactions_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `reactions:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "full"
        in: "query"
        description: "If true always return the complete reaction list."
        required: false
        type: "boolean"
        x-exportParamName: "Full"
      - name: "user"
        in: "query"
        description: "Show reactions made by this user. Defaults to the authed user."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/reactions.list schema"
          examples:
            application/json:
              items:
              - message:
                  username: "Shipit Notifications"
                  reactions:
                  - count: 1
                    name: "robot_face"
                    users:
                    - "U2U85N1RV"
                  text: "Hello from Python! :tada:"
                  ts: "1507849573.000090"
                  subtype: "bot_message"
                  bot_id: "B4VLRLMKJ"
                type: "message"
                channel: "C3UKJTQAC"
              - comment:
                  comment: "This is a file comment"
                  reactions:
                  - count: 1
                    name: "white_check_mark"
                    users:
                    - "U2U85N1RV"
                  created: 1508286096
                  timestamp: 1508286096
                  user: "U2U85N1RV"
                  type: "file_comment"
                  id: "Fc7LP08P1U"
                file:
                  username: ""
                  reactions:
                  - count: 1
                    name: "stuck_out_tongue_winking_eye"
                    users:
                    - "U2U85N1RV"
                  title: "computer.gif"
                  created: 1507850315
                  channels:
                  - "C2U7V2YA2"
                  comments_count: 1
                  user: "U2U85N1RV"
              - type: "file"
                file:
                  username: ""
                  reactions:
                  - count: 1
                    name: "stuck_out_tongue_winking_eye"
                    users:
                    - "U2U85N1RV"
                  name: "computer.gif"
                  created: 1507850315
                  title: "computer.gif"
                  channels:
                  - "C2U7V2YA2"
                  comments_count: 1
                  user: "U2U85N1RV"
                  id: "F7H0D7ZA4"
                  size: 1639034
              paging:
                count: 100
                total: 3
                page: 1
                pages: 1
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/reactions.list error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "reactions:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reactions.list"
  /conversations.create:
    post:
      tags:
      - "conversations"
      description: "Initiates a public or private channel-based conversation"
      operationId: "conversations_create"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "name"
        in: "formData"
        description: "Name of the public or private channel to create"
        required: false
        type: "string"
        x-exportParamName: "Name"
      - name: "is_private"
        in: "formData"
        description: "Create a private channel instead of a public one"
        required: false
        type: "boolean"
        x-exportParamName: "IsPrivate"
      responses:
        200:
          description: "If successful, the command returns a rather stark [conversation\
            \ object](/types/conversation)"
          schema:
            $ref: "#/definitions/conversations.create success schema"
          examples:
            application/json:
              ok: true
              channel:
                is_general: false
                name_normalized: "endeavor"
                is_channel: true
                creator: "U0123456"
                is_member: true
                is_archived: false
                topic:
                  last_set: 0
                  value: ""
                  creator: ""
                unread_count_display: 0
                priority: 0
                is_im: false
                is_ext_shared: false
                previous_names: []
                last_read: "0000000000.000000"
                id: "C0EAQDV4Z"
                is_org_shared: false
                is_pending_ext_shared: false
                is_mpim: false
                is_group: false
                purpose:
                  last_set: 0
                  value: ""
                  creator: ""
                is_private: false
                is_shared: false
                name: "endeavor"
                created: 1504554479
                pending_shared: []
                unread_count: 0
                unlinked: 0
                latest: null
        default:
          description: "Typical error response when name already in use"
          schema:
            $ref: "#/definitions/conversations.create error schema"
          examples:
            application/json:
              ok: false
              error: "name_taken"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.create"
  /team.billableInfo:
    get:
      tags:
      - "team"
      description: "Gets billable users information for the current team."
      operationId: "team_billableInfo"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `admin`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "query"
        description: "A user to retrieve the billable information for. Defaults to\
          \ all users."
        required: false
        type: "string"
        x-exportParamName: "User"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "admin"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.billableInfo"
  /dnd.endDnd:
    post:
      tags:
      - "dnd"
      description: "Ends the current user's Do Not Disturb session immediately."
      operationId: "dnd_endDnd"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `dnd:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "dnd:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.endDnd"
  /search.all:
    get:
      tags:
      - "search"
      description: "Searches for messages and files matching a query."
      operationId: "search_all"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "sort_dir"
        in: "query"
        description: "Change sort direction to ascending (`asc`) or descending (`desc`)."
        required: false
        type: "string"
        x-exportParamName: "SortDir"
      - name: "query"
        in: "query"
        description: "Search query. May contains booleans, etc."
        required: false
        type: "string"
        x-exportParamName: "Query"
      - name: "sort"
        in: "query"
        description: "Return matches sorted by either `score` or `timestamp`."
        required: false
        type: "string"
        x-exportParamName: "Sort"
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `search:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "highlight"
        in: "query"
        description: "Pass a value of `true` to enable query highlight markers (see\
          \ below)."
        required: false
        type: "boolean"
        x-exportParamName: "Highlight"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              files:
                matches:
                - groups: []
                  initial_comment:
                    comment: "Sure! Here's the workflow diagram!"
                    created: 1508804330
                    timestamp: 1508804330
                    is_intro: true
                    user: "U2U85N1RZ"
                    id: "Fc7NLL52E7"
                  filetype: "png"
                  channels: []
                  display_as_bot: false
                  id: "F7PKF1NR7"
                  size: 35705
                  original_h: 117
                  thumb_360_w: 128
                  title: "slack workflow diagram"
                  url_private: "https://files.slack.com/files-pri/T2U81E2FZ-F7PKF1NR7/slack_workflow_diagram.png"
                  thumb_360: "https://files.slack.com/files-tmb/T2U81E2FZ-F7PKF1NR7-19f33fc256/slack_workflow_diagram_360.png"
                  thumb_64: "https://files.slack.com/files-tmb/T2U81E2FZ-F7PKF1NR7-19f33fc256/slack_workflow_diagram_64.png"
                  ims: []
                  score: "0.99982661240974"
                  top_file: false
                  thumb_80: "https://files.slack.com/files-tmb/T2U81E2FZ-F7PKF1NR7-19f33fc256/slack_workflow_diagram_80.png"
                  thumb_360_h: 117
                  preview: null
                  original_w: 128
                  username: "amy"
                  timestamp: 1508804330
                  public_url_shared: false
                  editable: false
                  thumb_160: "https://files.slack.com/files-tmb/T2U81E2FZ-F7PKF1NR7-19f33fc256/slack_workflow_diagram_160.png"
                  url_private_download: "https://files.slack.com/files-pri/T2U81E2FZ-F7PKF1NR7/download/slack_workflow_diagram.png"
                  user: "U2U85N1RZ"
                  image_exif_rotation: 1
                  is_public: true
                  pretty_type: "PNG"
                  is_external: false
                  mimetype: "image/png"
                  permalink_public: "https://slack-files.com/T2U81E2FZ-F7PKF1NR7-bea9143f18"
                  permalink: "https://example.slack.com/files/U2U85N1RZ/F7PKF1NR7/slack_workflow_diagram.png"
                  name: "slack workflow diagram.png"
                  created: 1508804330
                  external_type: ""
                  comments_count: 1
                  mode: "hosted"
                pagination:
                  last: 1
                  total_count: 1
                  page_count: 1
                  per_page: 20
                  page: 1
                  first: 1
                total: 1
                paging:
                  count: 20
                  total: 1
                  page: 1
                  pages: 1
              ok: true
              messages:
                matches:
                - username: "amy"
                  permalink: "https://example.slack.com/archives/C2U86NC6M/p1508804330000296"
                  text: "uploaded a file: <https://example.slack.com/files/U2U85N1RZ/F7PKF1NR7/slack_workflow_diagram.png|slack\
                    \ workflow diagram> and commented: Sure! Here's the workflow diagram!"
                  ts: "1508804330.000296"
                  next:
                    username: "john"
                    text: "Thanks!"
                    ts: "1508804378.000219"
                    iid: "6f510ea1-e1d3-4f3f-bdb9-f9c6f6e9d609"
                    user: "U2U85HJ7R"
                    type: "message"
                  iid: "35692677-e60e-43d9-ac45-1987cea88975"
                  user: "U2U85N1RZ"
                  team: "T2U81E2FZ"
                  type: "message"
                  channel:
                    is_pending_ext_shared: false
                    is_shared: false
                    is_mpim: false
                    pending_shared: []
                    is_ext_shared: false
                    is_org_shared: false
                    id: "C2U86NC6M"
                    is_private: false
                    name: "general"
                  previous:
                    username: "john"
                    text: "Can you send me the Slack workflow diagram?"
                    ts: "1508804301.000026"
                    iid: "aba8603c-0543-4fb2-9118-a5ac85f3d138"
                    user: "U2U85HJ7R"
                    type: "message"
                pagination:
                  last: 1
                  total_count: 1
                  page_count: 1
                  per_page: 20
                  page: 1
                  first: 1
                total: 1
                paging:
                  count: 20
                  total: 1
                  page: 1
                  pages: 1
              posts:
                matches: []
                total: 0
              query: "diagram"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              needed: "search:read"
              provided: "identify,bot:basic"
              ok: false
              error: "missing_scope"
      security:
      - slackAuth:
        - "search:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/search.all"
  /files.comments.delete:
    post:
      tags:
      - "files.comments"
      - "files"
      description: "Deletes an existing comment on a file."
      operationId: "files_comments_delete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "id"
        in: "formData"
        description: "The comment to delete."
        required: false
        type: "string"
        x-exportParamName: "Id"
      - name: "file"
        in: "formData"
        description: "File to delete a comment from."
        required: false
        type: "string"
        x-exportParamName: "File"
      responses:
        200:
          description: "Standard success response is very simple"
          schema:
            $ref: "#/definitions/files.comments.delete schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Standard failure response when used with an invalid token"
          schema:
            $ref: "#/definitions/files.comments.delete error schema"
          examples:
            application/json:
              ok: false
              error: "file_not_found"
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.comments.delete"
  /auth.revoke:
    get:
      tags:
      - "auth"
      description: "Revokes a token."
      operationId: "auth_revoke"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "test"
        in: "query"
        description: "Setting this parameter to `1` triggers a _testing mode_ where\
          \ the specified token will not actually be revoked."
        required: false
        type: "boolean"
        x-exportParamName: "Test"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
              revoked: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/auth.revoke"
  /reactions.add:
    post:
      tags:
      - "reactions"
      description: "Adds a reaction to an item."
      operationId: "reactions_add"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Reaction (emoji) name."
        required: false
        type: "string"
        x-exportParamName: "Name"
      - name: "file_comment"
        in: "formData"
        description: "File comment to add reaction to."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to add reaction to."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reactions:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "formData"
        description: "File to add reaction to."
        required: false
        type: "string"
        x-exportParamName: "File"
      - name: "channel"
        in: "formData"
        description: "Channel where the message to add reaction to was posted."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/reactions.add schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/reactions.add error schema"
          examples:
            application/json:
              ok: false
              error: "already_reacted"
      security:
      - slackAuth:
        - "reactions:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reactions.add"
  /stars.add:
    post:
      tags:
      - "stars"
      description: "Adds a star to an item."
      operationId: "stars_add"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "file_comment"
        in: "formData"
        description: "File comment to add star to."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to add star to."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `stars:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Channel to add star to, or channel where the message to add\
          \ star to was posted (used with `timestamp`)."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "file"
        in: "formData"
        description: "File to add star to."
        required: false
        type: "string"
        x-exportParamName: "File"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "stars:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/stars.add"
  /reminders.complete:
    post:
      tags:
      - "reminders"
      description: "Marks a reminder as complete."
      operationId: "reminders_complete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reminders:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "reminder"
        in: "formData"
        description: "The ID of the reminder to be marked as complete"
        required: false
        type: "string"
        x-exportParamName: "Reminder"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "reminders:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.complete"
  /chat.unfurl:
    post:
      tags:
      - "chat"
      description: "Provide custom unfurl behavior for user-posted URLs"
      operationId: "chat_unfurl"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user_auth_message"
        in: "formData"
        description: "Provide a simply-formatted string to send as an ephemeral message\
          \ to the user as invitation to authenticate further and enable full unfurling\
          \ behavior"
        required: false
        type: "string"
        x-exportParamName: "UserAuthMessage"
      - name: "user_auth_required"
        in: "formData"
        description: "Set to `true` or `1` to indicate the user must install your\
          \ Slack app to trigger unfurls for this domain"
        required: false
        type: "boolean"
        x-exportParamName: "UserAuthRequired"
      - name: "unfurls"
        in: "formData"
        description: "URL-encoded JSON map with keys set to URLs featured in the the\
          \ message, pointing to their unfurl message attachments."
        required: false
        type: "string"
        x-exportParamName: "Unfurls"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the message to add unfurl behavior to."
        required: false
        type: "string"
        x-exportParamName: "Ts"
      - name: "user_auth_url"
        in: "formData"
        description: "Send users to this custom URL where they will complete authentication\
          \ in your app to fully trigger unfurling. Value should be properly URL-encoded."
        required: false
        type: "string"
        x-exportParamName: "UserAuthUrl"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `links:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Channel ID of the message"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical, minimal success response"
          schema:
            $ref: "#/definitions/chat.unfurl success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          examples:
            application/json:
              ok: false
              error: "cannot_unfurl_url"
      security:
      - slackAuth:
        - "links:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.unfurl"
  /conversations.unarchive:
    post:
      tags:
      - "conversations"
      description: "Reverses conversation archival."
      operationId: "conversations_unarchive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to unarchive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.unarchive success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/conversations.unarchive error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.unarchive"
  /groups.info:
    get:
      tags:
      - "groups"
      description: "Gets information about a private channel."
      operationId: "groups_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `groups:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for this group. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
      - name: "channel"
        in: "query"
        description: "Private channel to get info on"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/groups.info success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/groups.info error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.info"
  /files.revokePublicURL:
    post:
      tags:
      - "files"
      description: "Revokes public/external sharing access for a file"
      operationId: "files_revokePublicURL"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "formData"
        description: "File to revoke"
        required: false
        type: "string"
        x-exportParamName: "File"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.revokePublicURL"
  /conversations.list:
    get:
      tags:
      - "conversations"
      description: "Lists all channels in a Slack team."
      operationId: "conversations_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the list hasn't been\
          \ reached. Must be an integer no larger than 1000."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      - name: "exclude_archived"
        in: "query"
        description: "Set to `true` to exclude archived channels from the list"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeArchived"
      - name: "types"
        in: "query"
        description: "Mix and match channel types by providing a comma-separated list\
          \ of any combination of `public_channel`, `private_channel`, `mpim`, `im`"
        required: false
        type: "string"
        x-exportParamName: "Types"
      responses:
        200:
          description: "Typical success response with only public channels"
          schema:
            $ref: "#/definitions/conversations.list success schema"
          examples:
            application/json:
              channels:
              - is_general: true
                name_normalized: "general"
                is_channel: true
                creator: "U012A3CDE"
                is_member: true
                is_archived: false
                topic:
                  last_set: 0
                  value: "Company-wide announcements and work-based matters"
                  creator: ""
                is_im: false
                is_ext_shared: false
                previous_names: []
                id: "C012AB3CD"
                is_org_shared: false
                is_pending_ext_shared: false
                is_mpim: false
                is_group: false
                purpose:
                  last_set: 0
                  value: "This channel is for team-wide communication and announcements.\
                    \ All team members are in this channel."
                  creator: ""
                is_private: false
                is_shared: false
                num_members: 4
                name: "general"
                created: 1449252889
                pending_shared: []
                unlinked: 0
              - is_general: false
                name_normalized: "random"
                is_channel: true
                creator: "U061F7AUR"
                is_member: true
                is_archived: false
                topic:
                  last_set: 0
                  value: "Non-work banter and water cooler conversation"
                  creator: ""
                is_im: false
                is_ext_shared: false
                previous_names: []
                id: "C061EG9T2"
                is_org_shared: false
                is_pending_ext_shared: false
                is_mpim: false
                is_group: false
                purpose:
                  last_set: 0
                  value: "A place for non-work-related flimflam, faffing, hodge-podge\
                    \ or jibber-jabber you'd prefer to keep out of more focused work-related\
                    \ channels."
                  creator: ""
                is_private: false
                is_shared: false
                num_members: 4
                name: "random"
                created: 1449252889
                pending_shared: []
                unlinked: 0
              ok: true
              response_metadata:
                next_cursor: "dGVhbTpDMDYxRkE1UEI="
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/conversations.list error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:read"
        - "groups:read"
        - "im:read"
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.list"
  /stars.list:
    get:
      tags:
      - "stars"
      description: "Lists stars for a user."
      operationId: "stars_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `stars:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "stars:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/stars.list"
  /reactions.get:
    get:
      tags:
      - "reactions"
      description: "Gets reactions for an item."
      operationId: "reactions_get"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "full"
        in: "query"
        description: "If true always return the complete reaction list."
        required: false
        type: "boolean"
        x-exportParamName: "Full"
      - name: "file_comment"
        in: "query"
        description: "File comment to get reactions for."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
      - name: "timestamp"
        in: "query"
        description: "Timestamp of the message to get reactions for."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `reactions:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "query"
        description: "File to get reactions for."
        required: false
        type: "string"
        x-exportParamName: "File"
      - name: "channel"
        in: "query"
        description: "Channel where the message to get reactions for was posted."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            type: "object"
            description: "Schema for successful response from reactions.get method"
            title: "reactions.get success schema"
            properties: {}
          examples:
            application/json:
              type: "file"
              ok: true
              file:
                reactions:
                - count: 1
                  name: "stuck_out_tongue_winking_eye"
                  users:
                  - "U2U85N1RV"
                name: "computer.gif"
                created: 1507850315
                timestamp: 1507850315
                title: "computer.gif"
                channels:
                - "C2U7V2YA2"
                ims: []
                comments_count: 1
                user: "U2U85N1RV"
                groups: []
                id: "F7H0D7ZA4"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/reactions.get error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "reactions:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reactions.get"
  /im.history:
    get:
      tags:
      - "im"
      description: "Fetches history of messages and events from direct message channel."
      operationId: "im_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of messages to return, between 1 and 1000."
        required: false
        type: "integer"
        x-exportParamName: "Count"
      - name: "unreads"
        in: "query"
        description: "Include `unread_count_display` in the output?"
        required: false
        type: "boolean"
        x-exportParamName: "Unreads"
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `im:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
      - name: "channel"
        in: "query"
        description: "Direct message channel to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/im.history success schema"
          examples:
            application/json:
              has_more: false
              messages:
              - text: "Hello"
                type: "message"
                ts: "1358546515.000008"
                user: "U2147483896"
              - text: "World"
                is_starred: true
                type: "message"
                ts: "1358546515.000007"
                user: "U2147483896"
              - type: "something_else"
                ts: "1358546515.000007"
              ok: true
              latest: "1358547726.000003"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/im.history error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "im:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.history"
  /pins.add:
    post:
      tags:
      - "pins"
      description: "Pins an item to a channel."
      operationId: "pins_add"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "file_comment"
        in: "formData"
        description: "File comment to pin."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to pin."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `pins:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "formData"
        description: "File to pin."
        required: false
        type: "string"
        x-exportParamName: "File"
      - name: "channel"
        in: "formData"
        description: "Channel to pin the item in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/pins.add schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/pins.add error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "pins:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/pins.add"
  /channels.leave:
    post:
      tags:
      - "channels"
      description: "Leaves a channel."
      operationId: "channels_leave"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Channel to leave"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.leave"
  /chat.getPermalink:
    get:
      tags:
      - "chat"
      description: "Retrieve a permalink URL for a specific extant message"
      operationId: "chat_getPermalink"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "message_ts"
        in: "query"
        description: "A message's `ts` value, uniquely identifying it within a channel"
        required: false
        type: "number"
        x-exportParamName: "MessageTs"
      - name: "channel"
        in: "query"
        description: "The ID of the conversation or channel containing the message"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Standard success response"
          schema:
            $ref: "#/definitions/chat.getPermalink success schema"
          examples:
            application/json:
              permalink: "https://ghostbusters.slack.com/archives/C1H9RESGA/p135854651500008"
              ok: true
              channel: "C1H9RESGA"
        default:
          description: "Error response when channel cannot be found"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.getPermalink"
  /channels.rename:
    post:
      tags:
      - "channels"
      description: "Renames a channel."
      operationId: "channels_rename"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "name"
        in: "formData"
        description: "New name for channel."
        required: false
        type: "string"
        x-exportParamName: "Name"
      - name: "channel"
        in: "formData"
        description: "Channel to rename"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
              channel:
                previous_names:
                - "humans"
                is_general: false
                name_normalized: "humans-and-bots"
                is_shared: false
                is_channel: true
                creator: "U2U85N1RZ"
                is_member: false
                is_mpim: false
                is_archived: false
                created: 1477445146
                is_org_shared: false
                topic:
                  last_set: 1509475775
                  value: "here be robots"
                  creator: "U2U85N1RZ"
                purpose:
                  last_set: 1509475801
                  value: "the purpose of this channel is to bring people and robots\
                    \ together in harmony"
                  creator: "U2U85N1RZ"
                members: []
                unlinked: 0
                id: "C2U875RJN"
                is_private: false
                name: "humans-and-bots"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.rename"
  /files.list:
    get:
      tags:
      - "files"
      description: "Lists & filters team files."
      operationId: "files_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
      - name: "channel"
        in: "query"
        description: "Filter files appearing in a specific channel, indicated by its\
          \ ID."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "ts_to"
        in: "query"
        description: "Filter files created before this timestamp (inclusive)."
        required: false
        type: "number"
        x-exportParamName: "TsTo"
      - name: "ts_from"
        in: "query"
        description: "Filter files created after this timestamp (inclusive)."
        required: false
        type: "number"
        x-exportParamName: "TsFrom"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `files:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "query"
        description: "Filter files created by a single user."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
      - name: "types"
        in: "query"
        description: "Filter files by type:\n\n* `all` - All files\n* `spaces` - Posts\n\
          * `snippets` - Snippets\n* `images` - Image files\n* `gdocs` - Google docs\n\
          * `zips` - Zip files\n* `pdfs` - PDF files\n\nYou can pass multiple values\
          \ in the types argument, like `types=spaces,snippets`.The default value\
          \ is `all`, which does not filter the list."
        required: false
        type: "string"
        x-exportParamName: "Types"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/files.list schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/files.list error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "files:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.list"
  /mpim.mark:
    post:
      tags:
      - "mpim"
      description: "Sets the read cursor in a multiparty direct message channel."
      operationId: "mpim_mark"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `mpim:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the most recently seen message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
      - name: "channel"
        in: "formData"
        description: "multiparty direct message channel to set reading cursor in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.mark"
  /usergroups.users.update:
    post:
      tags:
      - "usergroups.users"
      - "usergroups"
      description: "Update the list of users for a User Group"
      operationId: "usergroups_users_update"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in the User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "users"
        in: "formData"
        description: "A comma separated string of encoded user IDs that represent\
          \ the entire list of users for the User Group."
        required: false
        type: "string"
        x-exportParamName: "Users"
      - name: "usergroup"
        in: "formData"
        description: "The encoded ID of the User Group to update."
        required: false
        type: "string"
        x-exportParamName: "Usergroup"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
              usergroup:
                is_external: false
                handle: "marketing-team"
                description: "Marketing gurus, PR experts and product advocates."
                date_delete: 0
                date_update: 1447102109
                created_by: "U060R4BJ4"
                deleted_by: null
                date_create: 1447096577
                team_id: "T060R4BHN"
                updated_by: "U060R4BJ4"
                user_count: 1
                auto_type: null
                prefs:
                  channels: []
                  groups: []
                users:
                - "U060R4BJ4"
                - "U060RNRCZ"
                is_usergroup: true
                id: "S0616NG6M"
                name: "Marketing Team"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.users.update"
  /conversations.setTopic:
    post:
      tags:
      - "conversations"
      description: "Sets the topic for a conversation."
      operationId: "conversations_setTopic"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "topic"
        in: "formData"
        description: "The new topic string. Does not support formatting or linkification."
        required: false
        type: "string"
        x-exportParamName: "Topic"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Conversation to set the topic of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.setTopic success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/conversations.setTopic error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.setTopic"
  /conversations.members:
    get:
      tags:
      - "conversations"
      description: "Retrieve members of a conversation."
      operationId: "conversations_members"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      - name: "channel"
        in: "query"
        description: "ID of the conversation to retrieve members for"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical paginated success response"
          schema:
            $ref: "#/definitions/conversations.members success schema"
          examples:
            application/json:
              ok: true
              response_metadata:
                next_cursor: "e3VzZXJfaWQ6IFcxMjM0NTY3fQ=="
              members:
              - "U023BECGF"
              - "U061F7AUR"
              - "W012A3CDE"
        default:
          description: "Typical error response when an invalid cursor is provided"
          schema:
            $ref: "#/definitions/conversations.members error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_cursor"
      security:
      - slackAuth:
        - "channels:read"
        - "groups:read"
        - "im:read"
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.members"
  /conversations.open:
    post:
      tags:
      - "conversations"
      description: "Opens or resumes a direct message or multi-person direct message."
      operationId: "conversations_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "return_im"
        in: "formData"
        description: "Boolean, indicates you want the full IM channel definition in\
          \ the response."
        required: false
        type: "boolean"
        x-exportParamName: "ReturnIm"
      - name: "users"
        in: "formData"
        description: "Comma separated lists of users. If only one user is included,\
          \ this creates a 1:1 DM.  The ordering of the users is preserved whenever\
          \ a multi-person direct message is returned. Supply a `channel` when not\
          \ supplying `users`."
        required: false
        type: "string"
        x-exportParamName: "Users"
      - name: "channel"
        in: "formData"
        description: "Resume a conversation by supplying an `im` or `mpim`'s ID. Or\
          \ provide the `users` field instead."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.open success schema"
          examples:
            application/json:
              ok: true
              channel:
                id: "D069C7QFK"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/conversations.open error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.open"
  /pins.remove:
    post:
      tags:
      - "pins"
      description: "Un-pins an item from a channel."
      operationId: "pins_remove"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "file_comment"
        in: "formData"
        description: "File comment to un-pin."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to un-pin."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `pins:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "formData"
        description: "File to un-pin."
        required: false
        type: "string"
        x-exportParamName: "File"
      - name: "channel"
        in: "formData"
        description: "Channel where the item is pinned to."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/pins.remove schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/pins.remove error schema"
          examples:
            application/json:
              ok: false
              error: "no_pin"
      security:
      - slackAuth:
        - "pins:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/pins.remove"
  /files.delete:
    post:
      tags:
      - "files"
      description: "Deletes a file."
      operationId: "files_delete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "formData"
        description: "ID of file to delete."
        required: false
        type: "string"
        x-exportParamName: "File"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/files.delete schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/files.delete error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.delete"
  /pins.list:
    get:
      tags:
      - "pins"
      description: "Lists items pinned to a channel."
      operationId: "pins_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `pins:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "query"
        description: "Channel to get pinned items for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          examples:
            application/json:
              items:
              - message:
                  permalink: "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508197641000151"
                  text: "What is the meaning of life?"
                  ts: "1508197641.000151"
                  pinned_to:
                  - "C2U86NC6H"
                  user: "U2U85N1RZ"
                  type: "message"
                type: "message"
                created_by: "U2U85N1RZ"
                channel: "C2U86NC6H"
                created: 1508881078
              - message:
                  permalink: "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508284197000015"
                  text: "The meaning of life, the universe, and everything is 42."
                  ts: "1503289197.000015"
                  pinned_to:
                  - "C2U86NC6H"
                  user: "U2U85N1RZ"
                  type: "message"
                type: "message"
                created_by: "U2U85N1RZ"
                channel: "C2U86NC6H"
                created: 1508880991
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/pins.list error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "pins:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/pins.list"
  /api.test:
    get:
      tags:
      - "api"
      description: "Checks API calling code."
      operationId: "api_test"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "foo"
        in: "query"
        description: "example property to return"
        required: false
        type: "string"
        x-exportParamName: "Foo"
      - name: "error"
        in: "query"
        description: "Error response to return"
        required: false
        type: "string"
        x-exportParamName: "Error_"
      responses:
        200:
          description: "Standard success response"
          schema:
            type: "object"
            description: "Schema for successful response api.test method"
            title: "api.test success schema"
            additionalProperties:
              type: "object"
              properties: {}
          examples:
            application/json:
              ok: true
        default:
          description: "Artificial error response"
          schema:
            type: "object"
            description: "Schema for error response api.test method"
            title: "api.test error schema"
            additionalProperties:
              type: "object"
              properties: {}
          examples:
            application/json:
              args:
                error: "my_error"
              ok: false
              error: "my_error"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/api.test"
  /reminders.list:
    get:
      tags:
      - "reminders"
      description: "Lists all reminders created by or for a given user."
      operationId: "reminders_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `reminders:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "reminders:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.list"
  /users.getPresence:
    get:
      tags:
      - "users"
      description: "Gets user presence information."
      operationId: "users_getPresence"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "query"
        description: "User to get presence info on. Defaults to the authed user."
        required: false
        type: "string"
        x-exportParamName: "User"
      responses:
        200:
          description: "When requesting information for a different user, this method\
            \ just returns the current presence (either `active` or `away`)."
          schema:
            $ref: "#/definitions/API method users.getPresence"
          examples:
            application/json:
              ok: true
              presence: "active"
        default:
          description: "Typical error response"
          schema:
            type: "object"
            description: "Schema for error response users.getPresence method"
            title: "users.counts error schema"
            additionalProperties:
              type: "object"
              properties: {}
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "users:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.getPresence"
  /usergroups.update:
    post:
      tags:
      - "usergroups"
      description: "Update an existing User Group"
      operationId: "usergroups_update"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "handle"
        in: "formData"
        description: "A mention handle. Must be unique among channels, users and User\
          \ Groups."
        required: false
        type: "string"
        x-exportParamName: "Handle"
      - name: "description"
        in: "formData"
        description: "A short description of the User Group."
        required: false
        type: "string"
        x-exportParamName: "Description"
      - name: "channels"
        in: "formData"
        description: "A comma separated string of encoded channel IDs for which the\
          \ User Group uses as a default."
        required: false
        type: "string"
        x-exportParamName: "Channels"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in the User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
      - name: "usergroup"
        in: "formData"
        description: "The encoded ID of the User Group to update."
        required: false
        type: "string"
        x-exportParamName: "Usergroup"
      - name: "name"
        in: "formData"
        description: "A name for the User Group. Must be unique among User Groups."
        required: false
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
              usergroup:
                is_external: false
                handle: "marketing-team"
                description: "Marketing gurus, PR experts and product advocates."
                date_delete: 0
                date_update: 1447102109
                created_by: "U060R4BJ4"
                deleted_by: null
                date_create: 1447096577
                team_id: "T060R4BHN"
                updated_by: "U060R4BJ4"
                user_count: 1
                auto_type: null
                prefs:
                  channels: []
                  groups: []
                users:
                - "U060R4BJ4"
                - "U060RNRCZ"
                is_usergroup: true
                id: "S0616NG6M"
                name: "Marketing Team"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.update"
  /conversations.leave:
    post:
      tags:
      - "conversations"
      description: "Leaves a conversation."
      operationId: "conversations_leave"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Conversation to leave"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.leave success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response when attempting to leave a workspace's\
            \ \"general\" channel"
          schema:
            $ref: "#/definitions/conversations.leave error schema"
          examples:
            application/json:
              ok: false
              error: "cant_leave_general"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.leave"
  /files.info:
    get:
      tags:
      - "files"
      description: "Gets information about a team file."
      operationId: "files_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `files:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "query"
        description: "Specify a file by providing its ID."
        required: false
        type: "string"
        x-exportParamName: "File"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/files.info schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/files.info error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "files:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.info"
  /groups.leave:
    post:
      tags:
      - "groups"
      description: "Leaves a private channel."
      operationId: "groups_leave"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Private channel to leave"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.leave"
  /apps.permissions.info:
    get:
      tags:
      - "apps.permissions"
      - "apps"
      description: "Returns list of permissions this app has on a team."
      operationId: "apps_permissions_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Standard success response when used with a user token"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              info:
                app_home:
                  scopes:
                  - "chat:write"
                  - "im:history"
                  - "im:read"
                  resources:
                    ids:
                    - "D0C0NU1Q8"
                    - "D0BH95DLH"
                group:
                  scopes: []
                  resources:
                    ids: []
                mpim:
                  scopes: []
                  resources:
                    ids: []
                im:
                  scopes: []
                  resources:
                    ids: []
                team:
                  scopes: []
                  resources:
                    ids: []
                channel:
                  scopes:
                  - "channels:read"
                  resources:
                    ids:
                    - "C061FA5PB"
                    wildcard: false
                    excluded_ids: []
              ok: true
        default:
          description: "Standard failure response when used with an invalid token"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/apps.permissions.info"
  /usergroups.create:
    post:
      tags:
      - "usergroups"
      description: "Create a User Group"
      operationId: "usergroups_create"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "handle"
        in: "formData"
        description: "A mention handle. Must be unique among channels, users and User\
          \ Groups."
        required: false
        type: "string"
        x-exportParamName: "Handle"
      - name: "name"
        in: "formData"
        description: "A name for the User Group. Must be unique among User Groups."
        required: false
        type: "string"
        x-exportParamName: "Name"
      - name: "channels"
        in: "formData"
        description: "A comma separated string of encoded channel IDs for which the\
          \ User Group uses as a default."
        required: false
        type: "string"
        x-exportParamName: "Channels"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in each User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
      - name: "description"
        in: "formData"
        description: "A short description of the User Group."
        required: false
        type: "string"
        x-exportParamName: "Description"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.create"
  /groups.createChild:
    post:
      tags:
      - "groups"
      description: "Clones and archives a private channel."
      operationId: "groups_createChild"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "formData"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Private channel to clone and archive."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.createChild"
  /channels.mark:
    post:
      tags:
      - "channels"
      description: "Sets the read cursor in a channel."
      operationId: "channels_mark"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the most recently seen message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
      - name: "channel"
        in: "formData"
        description: "Channel to set reading cursor in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/channels.mark success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/channels.mark error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.mark"
  /users.deletePhoto:
    post:
      tags:
      - "users"
      description: "Delete the user profile photo"
      operationId: "users_deletePhoto"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "formData"
        description: "Authentication token. Requires scope: `users.profile:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "users.profile:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.deletePhoto"
  /users.setPhoto:
    post:
      tags:
      - "users"
      description: "Set the user profile photo"
      operationId: "users_setPhoto"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "image"
        in: "formData"
        description: "File contents via `multipart/form-data`."
        required: false
        type: "string"
        x-exportParamName: "Image"
      - name: "crop_w"
        in: "formData"
        description: "Width/height of crop box (always square)"
        required: false
        type: "integer"
        x-exportParamName: "CropW"
      - name: "token"
        in: "formData"
        description: "Authentication token. Requires scope: `users.profile:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "crop_y"
        in: "formData"
        description: "Y coordinate of top-left corner of crop box"
        required: false
        type: "integer"
        x-exportParamName: "CropY"
      - name: "crop_x"
        in: "formData"
        description: "X coordinate of top-left corner of crop box"
        required: false
        type: "integer"
        x-exportParamName: "CropX"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "users.profile:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.setPhoto"
  /files.sharedPublicURL:
    post:
      tags:
      - "files"
      description: "Enables a file for public/external sharing."
      operationId: "files_sharedPublicURL"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "formData"
        description: "File to share"
        required: false
        type: "string"
        x-exportParamName: "File"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.sharedPublicURL"
  /conversations.kick:
    post:
      tags:
      - "conversations"
      description: "Removes a user from a conversation."
      operationId: "conversations_kick"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "formData"
        description: "User ID to be removed."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to remove user from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.kick success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response when you attempt to kick yourself from\
            \ a channel"
          schema:
            $ref: "#/definitions/conversations.kick error schema"
          examples:
            application/json:
              ok: false
              error: "cant_kick_self"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.kick"
  /chat.postEphemeral:
    post:
      tags:
      - "chat"
      description: "Sends an ephemeral message to a user in a channel."
      operationId: "chat_postEphemeral"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "attachments"
        in: "formData"
        description: "A JSON-based array of structured attachments, presented as a\
          \ URL-encoded string."
        required: false
        type: "string"
        x-exportParamName: "Attachments"
      - name: "text"
        in: "formData"
        description: "Text of the message to send. See below for an explanation of\
          \ [formatting](#formatting). This field is usually required, unless you're\
          \ providing only `attachments` instead."
        required: false
        type: "string"
        x-exportParamName: "Text"
      - name: "link_names"
        in: "formData"
        description: "Find and link channel names and usernames."
        required: false
        type: "boolean"
        x-exportParamName: "LinkNames"
      - name: "parse"
        in: "formData"
        description: "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
        required: false
        type: "string"
        x-exportParamName: "Parse"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "formData"
        description: "`id` of the user who will receive the ephemeral message. The\
          \ user should be in the channel specified by the `channel` argument."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "as_user"
        in: "formData"
        description: "Pass true to post the message as the authed bot. Defaults to\
          \ false."
        required: false
        type: "boolean"
        x-exportParamName: "AsUser"
      - name: "channel"
        in: "formData"
        description: "Channel, private group, or IM channel to send message to. Can\
          \ be an encoded ID, or a name."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/chat.postEphemeral success schema"
          examples:
            application/json:
              ok: true
              message_ts: "1502210682.580145"
        default:
          description: "Typical error response"
          examples:
            application/json:
              ok: false
              error: "user_not_in_channel"
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.postEphemeral"
  /conversations.rename:
    post:
      tags:
      - "conversations"
      description: "Renames a conversation."
      operationId: "conversations_rename"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "name"
        in: "formData"
        description: "New name for conversation."
        required: false
        type: "string"
        x-exportParamName: "Name"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to rename"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.rename success schema"
          examples:
            application/json:
              ok: true
              channel:
                is_general: true
                name_normalized: "general"
                is_channel: true
                creator: "W012A3BCD"
                is_member: true
                is_archived: false
                topic:
                  last_set: 1449709364
                  value: "For public discussion of generalities"
                  creator: "W012A3BCD"
                is_im: false
                is_ext_shared: false
                previous_names:
                - "specifics"
                - "abstractions"
                - "etc"
                last_read: "1502126650.228446"
                id: "C012AB3CD"
                is_org_shared: false
                locale: "en-US"
                is_pending_ext_shared: false
                is_mpim: false
                is_group: false
                is_read_only: false
                purpose:
                  last_set: 1449709364
                  value: "This part of the workspace is for fun. Make fun here."
                  creator: "W012A3BCD"
                is_private: false
                is_shared: false
                num_members: 23
                name: "general"
                created: 1449252889
                pending_shared: []
                unlinked: 0
        default:
          description: "Typical error response when the calling user is not a member\
            \ of the conversation"
          schema:
            $ref: "#/definitions/conversations.rename error schema"
          examples:
            application/json:
              ok: false
              error: "not_in_channel"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.rename"
  /migration.exchange:
    get:
      tags:
      - "migration"
      description: "For Enterprise Grid workspaces, map local user IDs to global user\
        \ IDs"
      operationId: "migration_exchange"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `tokens.basic`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "to_old"
        in: "query"
        description: "Specify `true` to convert `W` global user IDs to workspace-specific\
          \ `U` IDs. Defaults to `false`."
        required: false
        type: "boolean"
        x-exportParamName: "ToOld"
      - name: "users"
        in: "query"
        description: "A comma-separated list of user ids, up to 400 per request"
        required: false
        type: "string"
        x-exportParamName: "Users"
      responses:
        200:
          description: "Typical success response when mappings exist for the specified\
            \ user IDs"
          schema:
            $ref: "#/definitions/HTTP 200 response schema for migration.exchange"
          examples:
            application/json:
              team_id: "T1KR7PE1W"
              ok: true
              enterprise_id: "E1KQTNXE1"
              invalid_user_ids:
              - "U21ABZZXX"
              user_id_map:
                U06UBSUN5: "W06M56XJM"
                U06UBSVDX: "W06PUUDMW"
                U06UEB62U: "W06PTT6GH"
                W06UAZ65Q: "W06UAZ65Q"
                U06UBSVB3: "W06PUUDLY"
        default:
          description: "Typical error response when there are no mappings to provide"
          examples:
            application/json:
              ok: false
              error: "not_enterprise_team"
      security:
      - slackAuth:
        - "tokens.basic"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/migration.exchange"
  /usergroups.enable:
    post:
      tags:
      - "usergroups"
      description: "Enable a User Group"
      operationId: "usergroups_enable"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in the User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
      - name: "usergroup"
        in: "formData"
        description: "The encoded ID of the User Group to enable."
        required: false
        type: "string"
        x-exportParamName: "Usergroup"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.enable"
  /dnd.setSnooze:
    post:
      tags:
      - "dnd"
      description: "Turns on Do Not Disturb mode for the current user, or changes\
        \ its duration."
      operationId: "dnd_setSnooze"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "num_minutes"
        in: "formData"
        description: "Number of minutes, from now, to snooze until."
        required: false
        type: "integer"
        x-exportParamName: "NumMinutes"
      - name: "token"
        in: "formData"
        description: "Authentication token. Requires scope: `dnd:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "dnd:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.setSnooze"
  /chat.update:
    post:
      tags:
      - "chat"
      description: "Updates a message."
      operationId: "chat_update"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "attachments"
        in: "formData"
        description: "A JSON-based array of structured attachments, presented as a\
          \ URL-encoded string. This field is required when not presenting `text`."
        required: false
        type: "string"
        x-exportParamName: "Attachments"
      - name: "text"
        in: "formData"
        description: "New text for the message, using the [default formatting rules](/docs/formatting).\
          \ It's not required when presenting `attachments`."
        required: false
        type: "string"
        x-exportParamName: "Text"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the message to be updated."
        required: false
        type: "number"
        x-exportParamName: "Ts"
      - name: "parse"
        in: "formData"
        description: "Change how messages are treated. Defaults to `client`, unlike\
          \ `chat.postMessage`. See [below](#formatting)."
        required: false
        type: "string"
        x-exportParamName: "Parse"
      - name: "as_user"
        in: "formData"
        description: "Pass true to update the message as the authed user. [Bot users](/bot-users)\
          \ in this context are considered authed users."
        required: false
        type: "boolean"
        x-exportParamName: "AsUser"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "link_names"
        in: "formData"
        description: "Find and link channel names and usernames. Defaults to `none`.\
          \ This parameter should be used in conjunction with `parse`. To set `link_names`\
          \ to `1`, specify a `parse` mode of `full`."
        required: false
        type: "boolean"
        x-exportParamName: "LinkNames"
      - name: "channel"
        in: "formData"
        description: "Channel containing the message to be updated."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/chat.update success schema"
          examples:
            application/json:
              text: "Updated text you carefully authored"
              ok: true
              ts: "1401383885.000061"
              channel: "C024BE91L"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/chat.update error schema"
          examples:
            application/json:
              ok: false
              error: "cant_update_message"
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.update"
  /mpim.history:
    get:
      tags:
      - "mpim"
      description: "Fetches history of messages and events from a multiparty direct\
        \ message."
      operationId: "mpim_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of messages to return, between 1 and 1000."
        required: false
        type: "integer"
        x-exportParamName: "Count"
      - name: "unreads"
        in: "query"
        description: "Include `unread_count_display` in the output?"
        required: false
        type: "boolean"
        x-exportParamName: "Unreads"
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `mpim:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
      - name: "channel"
        in: "query"
        description: "Multiparty direct message to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              has_more: false
              messages:
              - text: "Hello"
                type: "message"
                ts: "1358546515.000008"
                user: "U2147483896"
              - text: "World"
                is_starred: true
                type: "message"
                ts: "1358546515.000007"
                user: "U2147483896"
              - type: "something_else"
                ts: "1358546515.000007"
              ok: true
              latest: "1358547726.000003"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "mpim:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.history"
  /apps.permissions.request:
    get:
      tags:
      - "apps.permissions"
      - "apps"
      description: "Allows an app to request additional scopes"
      operationId: "apps_permissions_request"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "scopes"
        in: "query"
        description: "A comma separated list of scopes to request for"
        required: false
        type: "string"
        x-exportParamName: "Scopes"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "trigger_id"
        in: "query"
        description: "Token used to trigger the permissions API"
        required: false
        type: "string"
        x-exportParamName: "TriggerId"
      responses:
        200:
          description: "Standard success response when used with a user token"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Standard failure response when trigger_id is invalid"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_trigger_id"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/apps.permissions.request"
  /channels.setPurpose:
    post:
      tags:
      - "channels"
      description: "Sets the purpose for a channel."
      operationId: "channels_setPurpose"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "purpose"
        in: "formData"
        description: "The new purpose"
        required: false
        type: "string"
        x-exportParamName: "Purpose"
      - name: "channel"
        in: "formData"
        description: "Channel to set the purpose of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
              purpose: "My special purpose"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.setPurpose"
  /users.identity:
    get:
      tags:
      - "users"
      description: "Get a user's identity."
      operationId: "users_identity"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `identity.basic`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "You will receive at a minimum the following information:"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
              user:
                name: "Sonny Whether"
                id: "U0G9QF9C6"
              team:
                id: "T0G9PQBBK"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "account_inactive"
      security:
      - slackAuth:
        - "identity.basic"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.identity"
  /team.accessLogs:
    get:
      tags:
      - "team"
      description: "Gets the access logs for the current team."
      operationId: "team_accessLogs"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `admin`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
      - name: "before"
        in: "query"
        description: "End of time range of logs to include in results (inclusive)."
        required: false
        type: "integer"
        x-exportParamName: "Before"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "admin"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.accessLogs"
  /groups.invite:
    post:
      tags:
      - "groups"
      description: "Invites a user to a private channel."
      operationId: "groups_invite"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "formData"
        description: "User to invite."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "channel"
        in: "formData"
        description: "Private channel to invite user to."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/groups.invite success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/groups.invite error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.invite"
  /channels.unarchive:
    post:
      tags:
      - "channels"
      description: "Unarchives a channel."
      operationId: "channels_unarchive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Channel to unarchive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.unarchive"
  /rtm.connect:
    get:
      tags:
      - "rtm"
      description: "Starts a Real Time Messaging session."
      operationId: "rtm_connect"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "presence_sub"
        in: "query"
        description: "Only deliver presence events when requested by subscription.\
          \ See [presence subscriptions](/docs/presence-and-status#subscriptions)."
        required: false
        type: "boolean"
        x-exportParamName: "PresenceSub"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `rtm:stream`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "batch_presence_aware"
        in: "query"
        description: "Batch presence deliveries via subscription. Enabling changes\
          \ the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching)."
        required: false
        type: "boolean"
        x-exportParamName: "BatchPresenceAware"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              url: "wss://..."
              self:
                id: "U4X318ZMZ"
                name: "robotoverlord"
              ok: true
              team:
                domain: "slackdemo"
                id: "T2U81E2FP"
                name: "SlackDemo"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "rtm:stream"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/rtm.connect"
  /team.info:
    get:
      tags:
      - "team"
      description: "Gets information about the current team."
      operationId: "team_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `team:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/team.info schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/team.info error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "team:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.info"
  /conversations.history:
    get:
      tags:
      - "conversations"
      description: "Fetches a conversation's history of messages and events."
      operationId: "conversations_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results\
          \ only when either timestamp is specified."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
      - name: "channel"
        in: "query"
        description: "Conversation ID to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
      responses:
        200:
          description: "Typical success response containing a channel's messages"
          schema:
            $ref: "#/definitions/conversations.history success schema"
          examples:
            application/json:
              has_more: true
              messages:
              - text: "I find you punny and would like to smell your nose letter"
                type: "message"
                user: "U012AB3CDE"
                ts: "1512085950.000216"
              - text: "What, you want to smell my shoes better?"
                type: "message"
                user: "U061F7AUR"
                ts: "1512104434.000490"
              ok: true
              response_metadata:
                next_cursor: "bmV4dF90czoxNTEyMDg1ODYxMDAwNTQz"
              pin_count: 0
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/conversations.history error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "channels:history"
        - "groups:history"
        - "im:history"
        - "mpim:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.history"
  /channels.create:
    post:
      tags:
      - "channels"
      description: "Creates a channel."
      operationId: "channels_create"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "name"
        in: "formData"
        description: "Name of channel to create"
        required: false
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          description: "Typical success response resulting in a new channel"
          schema:
            $ref: "#/definitions/channels.create error schema"
          examples:
            application/json:
              ok: true
              channel:
                topic:
                  last_set: 0
                  value: ""
                  creator: ""
                is_general: false
                name_normalized: "endeavor"
                name: "endeavor"
                is_channel: true
                created: 1502833204
                is_member: true
                is_mpim: false
                is_archived: false
                creator: "U061F7AUR"
                is_org_shared: false
                unread_count: 0
                previous_names: []
                purpose:
                  last_set: 0
                  value: ""
                  creator: ""
                unread_count_display: 0
                last_read: "0000000000.000000"
                latest: null
                members:
                - "U061F7AUR"
                id: "C0DEL09A5"
                is_private: false
                is_shared: false
        default:
          description: "Example error response when an invalid name is provided"
          schema:
            $ref: "#/definitions/channels.create error schema_1"
          examples:
            application/json:
              ok: false
              detail: "Value passed for `name` contained unallowed special characters."
              error: "invalid_name_specials"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.create"
  /im.replies:
    get:
      tags:
      - "im"
      description: "Retrieve a thread of messages posted to a direct message conversation"
      operationId: "im_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "query"
        description: "Unique identifier of a thread's parent message"
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `im:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "query"
        description: "Direct message channel to fetch thread from"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              messages:
              - text: "Hello"
                type: "message"
                ts: "1358546515.000008"
                user: "U2147483896"
              - text: "World"
                is_starred: true
                type: "message"
                ts: "1358546515.000007"
                user: "U2147483896"
              - type: "something_else"
                ts: "1358546515.000007"
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "im:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.replies"
  /groups.create:
    post:
      tags:
      - "groups"
      description: "Creates a private channel."
      operationId: "groups_create"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "name"
        in: "formData"
        description: "Name of private channel to create"
        required: false
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/groups.create success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/groups.create error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.create"
  /users.conversations:
    get:
      tags:
      - "users"
      description: "List conversations the calling user may access."
      operationId: "users_conversations"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the list hasn't been\
          \ reached. Must be an integer no larger than 1000."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      - name: "user"
        in: "query"
        description: "Browse conversations by a specific user ID's membership. Non-public\
          \ channels are restricted to those where the calling user shares membership."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "exclude_archived"
        in: "query"
        description: "Set to `true` to exclude archived channels from the list"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeArchived"
      - name: "types"
        in: "query"
        description: "Mix and match channel types by providing a comma-separated list\
          \ of any combination of `public_channel`, `private_channel`, `mpim`, `im`"
        required: false
        type: "string"
        x-exportParamName: "Types"
      responses:
        200:
          description: "Typical success response with only public channels. Note how\
            \ `num_members` and `is_member` are not returned like typical `conversations`\
            \ objects."
          schema:
            $ref: "#/definitions/conversations.list success schema_1"
          examples:
            application/json:
              channels:
              - is_pending_ext_shared: false
                is_general: true
                name_normalized: "general"
                name: "general"
                is_channel: true
                created: 1449252889
                is_mpim: false
                is_archived: false
                creator: "U012A3CDE"
                is_group: false
                pending_shared: []
                is_ext_shared: false
                is_org_shared: false
                previous_names: []
                topic:
                  last_set: 0
                  value: "Company-wide announcements and work-based matters"
                  creator: ""
                purpose:
                  last_set: 0
                  value: "This channel is for team-wide communication and announcements.\
                    \ All team members are in this channel."
                  creator: ""
                unlinked: 0
                is_im: false
                id: "C012AB3CD"
                is_private: false
                is_shared: false
              - is_pending_ext_shared: false
                is_general: false
                name_normalized: "random"
                name: "random"
                is_channel: true
                created: 1449252889
                is_mpim: false
                is_archived: false
                creator: "U061F7AUR"
                is_group: false
                pending_shared: []
                is_ext_shared: false
                is_org_shared: false
                previous_names: []
                topic:
                  last_set: 0
                  value: "Non-work banter and water cooler conversation"
                  creator: ""
                purpose:
                  last_set: 0
                  value: "A place for non-work-related flimflam, faffing, hodge-podge\
                    \ or jibber-jabber you'd prefer to keep out of more focused work-related\
                    \ channels."
                  creator: ""
                unlinked: 0
                is_im: false
                id: "C061EG9T2"
                is_private: false
                is_shared: false
              ok: true
              response_metadata:
                next_cursor: "dGVhbTpDMDYxRkE1UEI="
        default:
          description: "Typical error response"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:read"
        - "groups:read"
        - "im:read"
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.conversations"
  /conversations.setPurpose:
    post:
      tags:
      - "conversations"
      description: "Sets the purpose for a conversation."
      operationId: "conversations_setPurpose"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "purpose"
        in: "formData"
        description: "A new, specialer purpose"
        required: false
        type: "string"
        x-exportParamName: "Purpose"
      - name: "channel"
        in: "formData"
        description: "Conversation to set the purpose of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.setPurpose success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/conversations.setPurpose error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.setPurpose"
  /channels.join:
    post:
      tags:
      - "channels"
      description: "Joins a channel, creating it if needed."
      operationId: "channels_join"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "name"
        in: "formData"
        description: "Name of channel to join"
        required: false
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              already_in_channel: true
              ok: true
              channel:
                topic:
                  last_set: 1503435128
                  value: "My Topic"
                  creator: "U0G9QF9C6"
                is_general: false
                name_normalized: "busting"
                name: "busting"
                is_channel: true
                created: 1466025154
                is_member: true
                is_mpim: false
                is_archived: false
                creator: "U0G9QF9C6"
                is_org_shared: false
                previous_names: []
                purpose:
                  last_set: 1503435128
                  value: "My Purpose"
                  creator: "U0G9QF9C6"
                members:
                - "U0G9QF9C6"
                - "U1QNSQB9U"
                id: "C1H9RESGL"
                is_private: false
                is_shared: false
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.join"
  /usergroups.list:
    get:
      tags:
      - "usergroups"
      description: "List all User Groups for a team"
      operationId: "usergroups_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "include_users"
        in: "query"
        description: "Include the list of users for each User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeUsers"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `usergroups:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "include_count"
        in: "query"
        description: "Include the number of users in each User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
      - name: "include_disabled"
        in: "query"
        description: "Include disabled User Groups."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeDisabled"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              usergroups:
              - is_external: false
                handle: "admins"
                description: "A group of all Administrators on your team."
                date_delete: 0
                date_update: 1446670362
                created_by: "USLACKBOT"
                deleted_by: null
                date_create: 1446598059
                team_id: "T060RNRCH"
                updated_by: "U060RNRCZ"
                user_count: "2"
                auto_type: "admin"
                prefs:
                  channels: []
                  groups: []
                is_usergroup: true
                id: "S0614TZR7"
                name: "Team Admins"
              - is_external: false
                handle: "owners"
                description: "A group of all Owners on your team."
                date_delete: 0
                date_update: 1446678371
                created_by: "USLACKBOT"
                deleted_by: null
                date_create: 1446678371
                team_id: "T060RNRCH"
                updated_by: "USLACKBOT"
                user_count: "1"
                auto_type: "owner"
                prefs:
                  channels: []
                  groups: []
                is_usergroup: true
                id: "S06158AV7"
                name: "Team Owners"
              - is_external: false
                handle: "marketing-team"
                description: "Marketing gurus, PR experts and product advocates."
                date_delete: 1446748865
                date_update: 1446747767
                created_by: "U060RNRCZ"
                deleted_by: null
                date_create: 1446746793
                team_id: "T060RNRCH"
                updated_by: "U060RNRCZ"
                user_count: "0"
                auto_type: null
                prefs:
                  channels: []
                  groups: []
                is_usergroup: true
                id: "S0615G0KT"
                name: "Marketing Team"
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "usergroups:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.list"
  /conversations.join:
    post:
      tags:
      - "conversations"
      description: "Joins an existing conversation."
      operationId: "conversations_join"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to join"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.join success schema"
          examples:
            application/json:
              warning: "already_in_channel"
              ok: true
              response_metadata:
                warnings:
                - "already_in_channel"
              channel:
                is_general: true
                name_normalized: "general"
                is_channel: true
                creator: "U061F7AUR"
                is_member: true
                is_archived: false
                topic:
                  last_set: 0
                  value: "Which widget do you worry about?"
                  creator: ""
                is_im: false
                is_ext_shared: false
                previous_names: []
                id: "C061EG9SL"
                is_org_shared: false
                is_pending_ext_shared: false
                is_mpim: false
                is_group: false
                purpose:
                  last_set: 0
                  value: "For widget discussion"
                  creator: ""
                is_private: false
                is_shared: false
                name: "general"
                created: 1449252889
                pending_shared: []
                unlinked: 0
        default:
          description: "Typical error response if the conversation is archived and\
            \ cannot be joined"
          schema:
            $ref: "#/definitions/conversations.join error schema"
          examples:
            application/json:
              ok: false
              error: "is_archived"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.join"
  /groups.open:
    post:
      tags:
      - "groups"
      description: "Opens a private channel."
      operationId: "groups_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Private channel to open."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.open"
  /emoji.list:
    get:
      tags:
      - "emoji"
      description: "Lists custom emoji for a team."
      operationId: "emoji_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `emoji:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "emoji:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/emoji.list"
  /conversations.info:
    get:
      tags:
      - "conversations"
      description: "Retrieve information about a conversation."
      operationId: "conversations_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "query"
        description: "Conversation ID to learn more about"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for this conversation.\
          \ Defaults to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
      responses:
        200:
          description: "Typical success response for a public channel. (Also, a response\
            \ from a private channel and a multi-party IM is very similar to this\
            \ example.)"
          schema:
            $ref: "#/definitions/conversations.info success schema"
          examples:
            application/json:
              ok: true
              channel:
                is_general: true
                name_normalized: "general"
                is_channel: true
                creator: "W012A3BCD"
                is_member: true
                is_archived: false
                topic:
                  last_set: 1449709364
                  value: "For public discussion of generalities"
                  creator: "W012A3BCD"
                is_im: false
                is_ext_shared: false
                previous_names:
                - "specifics"
                - "abstractions"
                - "etc"
                last_read: "1502126650.228446"
                id: "C012AB3CD"
                is_org_shared: false
                locale: "en-US"
                is_pending_ext_shared: false
                is_mpim: false
                is_group: false
                is_read_only: false
                purpose:
                  last_set: 1449709364
                  value: "This part of the workspace is for fun. Make fun here."
                  creator: "W012A3BCD"
                is_private: false
                is_shared: false
                num_members: 23
                name: "general"
                created: 1449252889
                pending_shared: []
                unlinked: 0
        default:
          description: "Typical error response when a channel cannot be found"
          schema:
            $ref: "#/definitions/conversations.info error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "channels:read"
        - "groups:read"
        - "im:read"
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.info"
  /chat.meMessage:
    post:
      tags:
      - "chat"
      description: "Share a me message into a channel."
      operationId: "chat_meMessage"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "text"
        in: "formData"
        description: "Text of the message to send."
        required: false
        type: "string"
        x-exportParamName: "Text"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Channel to send message to. Can be a public channel, private\
          \ group or IM channel. Can be an encoded ID, or a name."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
              ts: "1417671948.000006"
              channel: "C024BE7LR"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "chat:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.meMessage"
  /dnd.endSnooze:
    post:
      tags:
      - "dnd"
      description: "Ends the current user's snooze mode immediately."
      operationId: "dnd_endSnooze"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `dnd:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "dnd:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.endSnooze"
  /groups.history:
    get:
      tags:
      - "groups"
      description: "Fetches history of messages and events from a private channel."
      operationId: "groups_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of messages to return, between 1 and 1000."
        required: false
        type: "integer"
        x-exportParamName: "Count"
      - name: "unreads"
        in: "query"
        description: "Include `unread_count_display` in the output?"
        required: false
        type: "boolean"
        x-exportParamName: "Unreads"
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `groups:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
      - name: "channel"
        in: "query"
        description: "Private channel to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/groups.history success schema"
          examples:
            application/json:
              has_more: false
              messages:
              - text: "Hello"
                type: "message"
                ts: "1358546515.000008"
                user: "U2147483896"
              - text: "World"
                is_starred: true
                type: "message"
                ts: "1358546515.000007"
                user: "U2147483896"
              - type: "something_else"
                ts: "1358546515.000007"
              ok: true
              latest: "1358547726.000003"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/groups.history error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "groups:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.history"
  /search.messages:
    get:
      tags:
      - "search"
      description: "Searches for messages matching a query."
      operationId: "search_messages"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "sort_dir"
        in: "query"
        description: "Change sort direction to ascending (`asc`) or descending (`desc`)."
        required: false
        type: "string"
        x-exportParamName: "SortDir"
      - name: "query"
        in: "query"
        description: "Search query. May contains booleans, etc."
        required: false
        type: "string"
        x-exportParamName: "Query"
      - name: "sort"
        in: "query"
        description: "Return matches sorted by either `score` or `timestamp`."
        required: false
        type: "string"
        x-exportParamName: "Sort"
      - name: "count"
        in: "query"
        description: "Pass the number of results you want per \"page\". Maximum of\
          \ `100`."
        required: false
        type: "string"
        x-exportParamName: "Count"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `search:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "highlight"
        in: "query"
        description: "Pass a value of `true` to enable query highlight markers (see\
          \ below)."
        required: false
        type: "boolean"
        x-exportParamName: "Highlight"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
              messages:
                matches:
                - username: "roach"
                  permalink: "https://hitchhikers.slack.com/archives/C12345678/p1508284197000015"
                  text: "The meaning of life the universe and everything is 42."
                  ts: "1508284197.000015"
                  iid: "cb64bdaa-c1e8-4631-8a91-0f78080113e9"
                  user: "U2U85N1RV"
                  team: "T12345678"
                  type: "message"
                  channel:
                    is_pending_ext_shared: false
                    is_shared: false
                    is_mpim: false
                    pending_shared: []
                    is_ext_shared: false
                    is_org_shared: false
                    id: "C12345678"
                    is_private: false
                    name: "general"
                - username: "robot overlord"
                  permalink: "https://hitchhikers.slack.com/archives/C12345678/p1508795665000236"
                  text: "The meaning of life the universe and everything is 101010"
                  ts: "1508795665.000236"
                  iid: "9a00d3c9-bd2d-45b0-988b-6cff99ae2a90"
                  user: ""
                  team: "T12345678"
                  type: "message"
                  channel:
                    is_pending_ext_shared: false
                    is_shared: false
                    is_mpim: false
                    pending_shared: []
                    is_ext_shared: false
                    is_org_shared: false
                    id: "C12345678"
                    is_private: false
                    name: "random"
                pagination:
                  last: 2
                  total_count: 2
                  page_count: 1
                  per_page: 20
                  page: 1
                  first: 1
                total: 2
                paging:
                  count: 20
                  total: 2
                  page: 1
                  pages: 1
              query: "The meaning of life the universe and everything"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "No query passed"
      security:
      - slackAuth:
        - "search:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/search.messages"
  /rtm.start:
    get:
      tags:
      - "rtm"
      description: "Starts a Real Time Messaging session."
      operationId: "rtm_start"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "no_latest"
        in: "query"
        description: "Exclude latest timestamps for channels, groups, mpims, and ims.\
          \ Automatically sets `no_unreads` to `1`"
        required: false
        type: "boolean"
        x-exportParamName: "NoLatest"
      - name: "simple_latest"
        in: "query"
        description: "Return timestamp only for latest message object of each channel\
          \ (improves performance)."
        required: false
        type: "boolean"
        x-exportParamName: "SimpleLatest"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for users and channels.\
          \ Defaults to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
      - name: "presence_sub"
        in: "query"
        description: "Only deliver presence events when requested by subscription.\
          \ See [presence subscriptions](/docs/presence-and-status#subscriptions)."
        required: false
        type: "boolean"
        x-exportParamName: "PresenceSub"
      - name: "no_unreads"
        in: "query"
        description: "Skip unread counts for each channel (improves performance)."
        required: false
        type: "boolean"
        x-exportParamName: "NoUnreads"
      - name: "batch_presence_aware"
        in: "query"
        description: "Batch presence deliveries via subscription. Enabling changes\
          \ the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching)."
        required: false
        type: "boolean"
        x-exportParamName: "BatchPresenceAware"
      - name: "mpim_aware"
        in: "query"
        description: "Returns MPIMs to the client in the API response."
        required: false
        type: "boolean"
        x-exportParamName: "MpimAware"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `rtm:stream`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "rtm:stream"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/rtm.start"
  /channels.setTopic:
    post:
      tags:
      - "channels"
      description: "Sets the topic for a channel."
      operationId: "channels_setTopic"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "topic"
        in: "formData"
        description: "The new topic"
        required: false
        type: "string"
        x-exportParamName: "Topic"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Channel to set the topic of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              topic: "To picture topicality"
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.setTopic"
  /groups.setTopic:
    post:
      tags:
      - "groups"
      description: "Sets the topic for a private channel."
      operationId: "groups_setTopic"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "topic"
        in: "formData"
        description: "The new topic"
        required: false
        type: "string"
        x-exportParamName: "Topic"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Private channel to set the topic of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.setTopic"
  /im.close:
    post:
      tags:
      - "im"
      description: "Close a direct message channel."
      operationId: "im_close"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `im:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Direct message channel to close."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "im:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.close"
  /reactions.remove:
    post:
      tags:
      - "reactions"
      description: "Removes a reaction from an item."
      operationId: "reactions_remove"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Reaction (emoji) name."
        required: false
        type: "string"
        x-exportParamName: "Name"
      - name: "file_comment"
        in: "formData"
        description: "File comment to remove reaction from."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to remove reaction from."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reactions:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "formData"
        description: "File to remove reaction from."
        required: false
        type: "string"
        x-exportParamName: "File"
      - name: "channel"
        in: "formData"
        description: "Channel where the message to remove reaction from was posted."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/reactions.remove schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/reactions.remove error schema"
          examples:
            application/json:
              ok: false
              error: "no_reaction"
      security:
      - slackAuth:
        - "reactions:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reactions.remove"
  /reminders.delete:
    post:
      tags:
      - "reminders"
      description: "Deletes a reminder."
      operationId: "reminders_delete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reminders:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "reminder"
        in: "formData"
        description: "The ID of the reminder"
        required: false
        type: "string"
        x-exportParamName: "Reminder"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "reminders:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.delete"
  /usergroups.disable:
    post:
      tags:
      - "usergroups"
      description: "Disable an existing User Group"
      operationId: "usergroups_disable"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in the User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
      - name: "usergroup"
        in: "formData"
        description: "The encoded ID of the User Group to disable."
        required: false
        type: "string"
        x-exportParamName: "Usergroup"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.disable"
  /files.comments.add:
    post:
      tags:
      - "files.comments"
      - "files"
      description: "Add a comment to an existing file."
      operationId: "files_comments_add"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "comment"
        in: "formData"
        description: "Text of the comment to add."
        required: false
        type: "string"
        x-exportParamName: "Comment"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "file"
        in: "formData"
        description: "File to add a comment to."
        required: false
        type: "string"
        x-exportParamName: "File"
      responses:
        200:
          description: "Standard success response"
          schema:
            $ref: "#/definitions/files.comments.add schema"
          examples:
            application/json:
              comment:
                comment: "Everyone should take a moment to read this file."
                created: 1356032811
                timestamp: 1356032811
                user: "U1234567890"
                id: "Fc1234567890"
                channel: "C1234467890"
              ok: true
        default:
          description: "Artificial error response"
          schema:
            $ref: "#/definitions/files.comments.add error schema"
          examples:
            application/json:
              ok: false
              error: "file_not_found"
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.comments.add"
  /im.list:
    get:
      tags:
      - "im"
      description: "Lists direct message channels for the calling user."
      operationId: "im_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `im:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/im.list success schema"
          examples:
            application/json:
              ims:
              - created: 1449709280
                is_user_deleted: false
                is_org_shared: false
                user: "USLACKBOT"
                is_im: true
                id: "D0G9QPY56"
              - created: 1466692204
                is_user_deleted: false
                is_org_shared: false
                user: "U0G9QF9C6"
                is_im: true
                id: "D1KL59A72"
              - created: 1449722883
                is_user_deleted: false
                is_org_shared: false
                user: "U0G9WFXNZ"
                is_im: true
                id: "D0G9XPFH9"
              - created: 1452098023
                is_user_deleted: false
                is_org_shared: false
                user: "W0HRJL7CK"
                is_im: true
                id: "D0HRHJSF7"
              - created: 1465834222
                is_user_deleted: true
                is_org_shared: false
                user: "U1GDBDGR3"
                is_im: true
                id: "D1GD7CHC0"
              - created: 1468274703
                is_user_deleted: false
                is_org_shared: false
                user: "U1QNSQB9U"
                is_im: true
                id: "D1QMF76M9"
              - created: 1502210225
                is_user_deleted: false
                is_org_shared: false
                user: "U6KR7BVFW"
                is_im: true
                id: "D6K48KKRN"
              ok: true
              response_metadata:
                next_cursor: "aW1faWQ6RDBCSDk1RExI="
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/im.list error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "im:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.list"
  /search.files:
    get:
      tags:
      - "search"
      description: "Searches for files matching a query."
      operationId: "search_files"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "sort_dir"
        in: "query"
        description: "Change sort direction to ascending (`asc`) or descending (`desc`)."
        required: false
        type: "string"
        x-exportParamName: "SortDir"
      - name: "query"
        in: "query"
        description: "Search query. May contain booleans, etc."
        required: false
        type: "string"
        x-exportParamName: "Query"
      - name: "sort"
        in: "query"
        description: "Return matches sorted by either `score` or `timestamp`."
        required: false
        type: "string"
        x-exportParamName: "Sort"
      - name: "highlight"
        in: "query"
        description: "Pass a value of `true` to enable query highlight markers (see\
          \ below)."
        required: false
        type: "boolean"
        x-exportParamName: "Highlight"
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `search:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              files:
                matches:
                - thumb_480_w: 480
                  reactions:
                  - count: 1
                    name: "stuck_out_tongue_winking_eye"
                    users:
                    - "U2U85N1RZ"
                  thumb_480_gif: "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_480.gif"
                  groups: []
                  filetype: "gif"
                  channels: []
                  display_as_bot: false
                  id: "F7H0D7ZBB"
                  size: 1639034
                  original_h: 313
                  thumb_360_w: 360
                  title: "computer.gif"
                  url_private: "https://files.slack.com/files-pri/T2U81E2BB-F7H0D7ZBB/computer.gif"
                  thumb_360: "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_360.png"
                  thumb_480: "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_480.png"
                  thumb_64: "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_64.png"
                  ims: []
                  score: "0.38899223746309"
                  top_file: false
                  thumb_80: "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_80.png"
                  thumb_360_h: 225
                  preview: null
                  original_w: 500
                  username: ""
                  timestamp: 1507850315
                  public_url_shared: false
                  editable: false
                  thumb_160: "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_160.png"
                  thumb_480_h: 300
                  thumb_360_gif: "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_360.gif"
                  user: "U2U85N1RZ"
                  image_exif_rotation: 1
                  is_public: true
                  pretty_type: "GIF"
                  is_external: false
                  mimetype: "image/gif"
                  permalink_public: "https://slack-files.com/T2U81E2BB-F7H0D7ZBB-85b7f5557e"
                  permalink: "https://eventsdemo.slack.com/files/U2U85N1RZ/F7H0D7ZBB/computer.gif"
                  name: "computer.gif"
                  created: 1507850315
                  url_private_download: "https://files.slack.com/files-pri/T2U81E2BB-F7H0D7ZBB/download/computer.gif"
                  external_type: ""
                  comments_count: 1
                  mode: "hosted"
                  deanimate_gif: "https://files.slack.com/files-tmb/T2U81E2BB-F7H0D7ZBB-21624821e6/computer_deanimate_gif.png"
                pagination:
                  last: 3
                  total_count: 3
                  page_count: 1
                  per_page: 20
                  page: 1
                  first: 1
                total: 3
                paging:
                  count: 20
                  total: 3
                  page: 1
                  pages: 1
              query: "computer.gif"
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "No query passed"
      security:
      - slackAuth:
        - "search:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/search.files"
  /mpim.replies:
    get:
      tags:
      - "mpim"
      description: "Retrieve a thread of messages posted to a direct message conversation\
        \ from a multiparty direct message."
      operationId: "mpim_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "query"
        description: "Unique identifier of a thread's parent message."
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `mpim:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "query"
        description: "Multiparty direct message channel to fetch thread from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              messages:
              - text: "Hello"
                type: "message"
                ts: "1358546515.000008"
                user: "U2147483896"
              - text: "World"
                is_starred: true
                type: "message"
                ts: "1358546515.000007"
                user: "U2147483896"
              - type: "something_else"
                ts: "1358546515.000007"
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "mpim:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.replies"
  /dialog.open:
    get:
      tags:
      - "dialog"
      description: "Open a dialog with a user"
      operationId: "dialog_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "dialog"
        in: "query"
        description: "The dialog definition. This must be a JSON-encoded string."
        required: false
        type: "string"
        x-exportParamName: "Dialog"
      - name: "trigger_id"
        in: "query"
        description: "Exchange a trigger to post to the user."
        required: false
        type: "string"
        x-exportParamName: "TriggerId"
      responses:
        200:
          description: "Typical success response is quite minimal."
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response, before getting to any possible validation\
            \ errors."
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "missing_trigger"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dialog.open"
  /dnd.teamInfo:
    get:
      tags:
      - "dnd"
      description: "Retrieves the Do Not Disturb status for users on a team."
      operationId: "dnd_teamInfo"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `dnd:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "users"
        in: "query"
        description: "Comma-separated list of users to fetch Do Not Disturb status\
          \ for"
        required: false
        type: "string"
        x-exportParamName: "Users"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/dnd.teamInfo success schema"
          examples:
            application/json:
              ok: true
              users:
                W058CJVAA:
                  dnd_enabled: false
                  next_dnd_end_ts: 1
                  next_dnd_start_ts: 1
                U023BECGF:
                  dnd_enabled: true
                  next_dnd_end_ts: 1450423800
                  next_dnd_start_ts: 1450387800
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/dnd.teamInfo error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "dnd:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.teamInfo"
  /users.list:
    get:
      tags:
      - "users"
      description: "Lists all users in a Slack team."
      operationId: "users_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "presence"
        in: "query"
        description: "Deprecated. Whether to include presence data in the output.\
          \ Defaults to `false`. Setting this to `true` reduces performance, especially\
          \ with large teams."
        required: false
        type: "boolean"
        x-exportParamName: "Presence"
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for users. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/users.list schema"
          examples:
            application/json:
              cache_ts: 1498777272
              ok: true
              response_metadata:
                next_cursor: "dXNlcjpVMEc5V0ZYTlo="
              members:
              - profile:
                  display_name: "spengler"
                  status_emoji: ":books:"
                  team: "T012AB3C4"
                  real_name: "Egon Spengler"
                  image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  real_name_normalized: "Egon Spengler"
                  image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  display_name_normalized: "spengler"
                  image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  avatar_hash: "ge3b51ca72de"
                  status_text: "Print is dead"
                  email: "spengler@ghostbusters.example.com"
                  image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                updated: 1502138686
                tz: "America/Los_Angeles"
                name: "spengler"
                deleted: false
                is_app_user: false
                is_bot: false
                tz_label: "Pacific Daylight Time"
                real_name: "spengler"
                color: "9f69e7"
                team_id: "T012AB3C4"
                is_admin: true
                is_ultra_restricted: false
                is_restricted: false
                is_owner: false
                tz_offset: -25200
                has_2fa: false
                id: "W012A3CDE"
                is_primary_owner: false
              - profile:
                  first_name: "Glinda"
                  last_name: "Southgood"
                  display_name: "Glinda the Fairly Good"
                  title: "Glinda the Good"
                  image_1024: "https://a.slack-edge.com...png"
                  skype: ""
                  phone: ""
                  real_name: "Glinda Southgood"
                  image_24: "https://a.slack-edge.com...png"
                  image_original: "https://a.slack-edge.com...png"
                  real_name_normalized: "Glinda Southgood"
                  image_512: "https://a.slack-edge.com...png"
                  image_32: "https://a.slack-edge.com...png"
                  image_48: "https://a.slack-edge.com...png"
                  image_72: "https://a.slack-edge.com...png"
                  avatar_hash: "8fbdd10b41c6"
                  display_name_normalized: "Glinda the Fairly Good"
                  email: "glenda@south.oz.coven"
                  image_192: "https://a.slack-edge.com...png"
                updated: 1480527098
                tz: "America/Los_Angeles"
                name: "glinda"
                deleted: false
                is_bot: false
                tz_label: "Pacific Daylight Time"
                real_name: "Glinda Southgood"
                color: "9f69e7"
                team_id: "T0G9PQBBK"
                is_admin: true
                is_ultra_restricted: false
                is_restricted: false
                is_owner: false
                tz_offset: -25200
                has_2fa: false
                id: "W07QCRPA4"
                is_primary_owner: false
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/users.list error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_cursor"
      security:
      - slackAuth:
        - "users:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.list"
  /conversations.invite:
    post:
      tags:
      - "conversations"
      description: "Invites users to a channel."
      operationId: "conversations_invite"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "users"
        in: "formData"
        description: "A comma separated list of user IDs. Up to 30 users may be listed."
        required: false
        type: "string"
        x-exportParamName: "Users"
      - name: "channel"
        in: "formData"
        description: "The ID of the public or private channel to invite user(s) to."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response when an invitation is extended"
          schema:
            $ref: "#/definitions/conversations.invite error schema"
          examples:
            application/json:
              ok: true
              channel:
                is_general: true
                name_normalized: "general"
                is_channel: true
                creator: "W012A3BCD"
                is_member: true
                is_archived: false
                topic:
                  last_set: 1449709364
                  value: "For public discussion of generalities"
                  creator: "W012A3BCD"
                is_im: false
                is_ext_shared: false
                previous_names:
                - "specifics"
                - "abstractions"
                - "etc"
                last_read: "1502126650.228446"
                id: "C012AB3CD"
                is_org_shared: false
                locale: "en-US"
                is_pending_ext_shared: false
                is_mpim: false
                is_group: false
                is_read_only: false
                purpose:
                  last_set: 1449709364
                  value: "This part of the workspace is for fun. Make fun here."
                  creator: "W012A3BCD"
                is_private: false
                is_shared: false
                num_members: 23
                name: "general"
                created: 1449252889
                pending_shared: []
                unlinked: 0
        default:
          description: "Typical error response when an invite is attempted on a conversation\
            \ type that does not support it"
          schema:
            $ref: "#/definitions/conversations.invite error schema_1"
          examples:
            application/json:
              ok: false
              error: "method_not_supported_for_channel_type"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.invite"
  /auth.test:
    get:
      tags:
      - "auth"
      description: "Checks authentication & identity."
      operationId: "auth_test"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Standard success response when used with a user token"
          schema:
            $ref: "#/definitions/auth.test success schema"
          examples:
            application/json:
              user_id: "W12345678"
              url: "https://subarachnoid.slack.com/"
              team_id: "T12345678"
              user: "grace"
              team: "Subarachnoid Workspace"
              ok: true
        default:
          description: "Standard failure response when used with an invalid token"
          schema:
            $ref: "#/definitions/auth.test error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/auth.test"
  /channels.list:
    get:
      tags:
      - "channels"
      description: "Lists all channels in a Slack team."
      operationId: "channels_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "exclude_members"
        in: "query"
        description: "Exclude the `members` collection from each `channel`"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeMembers"
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `channels:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      - name: "exclude_archived"
        in: "query"
        description: "Exclude archived channels from the list"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeArchived"
      responses:
        200:
          description: "Typical cursored success response"
          schema:
            $ref: "#/definitions/channels.list success schema"
          examples:
            application/json:
              channels:
              - topic:
                  last_set: 1449709352
                  value: "Other stuff"
                  creator: "U0G9QF9C6"
                is_general: false
                name_normalized: "random"
                name: "random"
                is_channel: true
                created: 1449709280
                is_member: true
                is_mpim: false
                is_archived: false
                creator: "U0G9QF9C6"
                is_org_shared: false
                previous_names: []
                num_members: 2
                purpose:
                  last_set: 0
                  value: "A place for non-work-related flimflam, faffing, hodge-podge\
                    \ or jibber-jabber you'd prefer to keep out of more focused work-related\
                    \ channels."
                  creator: ""
                members:
                - "U0G9QF9C6"
                - "U0G9WFXNZ"
                id: "C0G9QF9GW"
                is_private: false
                is_shared: false
              - topic:
                  last_set: 1449709364
                  value: "Talk about anything!"
                  creator: "U0G9QF9C6"
                is_general: true
                name_normalized: "general"
                name: "general"
                is_channel: true
                created: 1449709280
                is_member: true
                is_mpim: false
                is_archived: false
                creator: "U0G9QF9C6"
                is_org_shared: false
                previous_names: []
                num_members: 2
                purpose:
                  last_set: 1449709334
                  value: "To talk about anything!"
                  creator: "U0G9QF9C6"
                members:
                - "U0G9QF9C6"
                - "U0G9WFXNZ"
                id: "C0G9QKBBL"
                is_private: false
                is_shared: false
              ok: true
              response_metadata:
                next_cursor: "dGVhbTpDMUg5UkVTR0w="
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/channels.list error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "channels:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.list"
  /groups.setPurpose:
    post:
      tags:
      - "groups"
      description: "Sets the purpose for a private channel."
      operationId: "groups_setPurpose"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "purpose"
        in: "formData"
        description: "The new purpose"
        required: false
        type: "string"
        x-exportParamName: "Purpose"
      - name: "channel"
        in: "formData"
        description: "Private channel to set the purpose of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.setPurpose"
  /channels.invite:
    post:
      tags:
      - "channels"
      description: "Invites a user to a channel."
      operationId: "channels_invite"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "user"
        in: "formData"
        description: "User to invite to channel."
        required: false
        type: "string"
        x-exportParamName: "User"
      - name: "channel"
        in: "formData"
        description: "Channel to invite user to."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/channels.invite error schema"
          examples:
            application/json:
              ok: true
              channel:
                topic:
                  last_set: 1503435128
                  value: "My Topic"
                  creator: "U0G9QF9C6"
                is_general: false
                name_normalized: "busting"
                name: "busting"
                is_channel: true
                created: 1466025154
                is_member: true
                is_mpim: false
                is_archived: false
                creator: "U0G9QF9C6"
                is_org_shared: false
                unread_count: 0
                previous_names: []
                purpose:
                  last_set: 1503435128
                  value: "My Purpose"
                  creator: "U0G9QF9C6"
                unread_count_display: 0
                last_read: "1503435963.000307"
                latest:
                  text: "<@U1QNSQB9U|protobot> has left the channel"
                  type: "message"
                  user: "U1QNSQB9U"
                  ts: "1503435963.000307"
                  subtype: "channel_leave"
                members:
                - "U0G9QF9C6"
                - "U1QNSQB9U"
                id: "C1H9RESGL"
                is_private: false
                is_shared: false
        default:
          description: "A somewhat typical error response"
          schema:
            $ref: "#/definitions/channels.invite error schema_1"
          examples:
            application/json:
              ok: false
              error: "cant_invite"
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.invite"
  /oauth.access:
    get:
      tags:
      - "oauth"
      description: "Exchanges a temporary OAuth code for an API token."
      operationId: "oauth_access"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "client_secret"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientSecret"
      - name: "code"
        in: "query"
        description: "The `code` param returned via the OAuth callback."
        required: false
        type: "string"
        x-exportParamName: "Code"
      - name: "client_id"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
      - name: "redirect_uri"
        in: "query"
        description: "This must match the originally submitted URI (if one was sent)."
        required: false
        type: "string"
        x-exportParamName: "RedirectUri"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/oauth.access"
  /mpim.list:
    get:
      tags:
      - "mpim"
      description: "Lists multiparty direct message channels for the calling user."
      operationId: "mpim_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `mpim:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.list"
  /conversations.replies:
    get:
      tags:
      - "conversations"
      description: "Retrieve a thread of messages posted to a conversation"
      operationId: "conversations_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results\
          \ only when either timestamp is specified."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
      - name: "ts"
        in: "query"
        description: "Unique identifier of a thread's parent message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
      - name: "channel"
        in: "query"
        description: "Conversation ID to fetch thread from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.replies success schema"
          examples:
            application/json:
              has_more: true
              ok: true
              messages:
              - thread_ts: "1482960137.003543"
                last_read: "1484678597.521003"
                subscribed: true
                text: "island"
                ts: "1482960137.003543"
                unread_count: 0
                reply_count: 3
                user: "U061F7AUR"
                replies:
                - user: "U061F7AUR"
                  ts: "1483037603.017503"
                - user: "U061F7AUR"
                  ts: "1483051909.018632"
                - user: "U061F7AUR"
                  ts: "1483125339.020269"
                type: "message"
              - thread_ts: "1482960137.003543"
                text: "one island"
                ts: "1483037603.017503"
                user: "U061F7AUR"
                parent_user_id: "U061F7AUR"
                type: "message"
              - thread_ts: "1482960137.003543"
                text: "two island"
                ts: "1483051909.018632"
                user: "U061F7AUR"
                parent_user_id: "U061F7AUR"
                type: "message"
              - thread_ts: "1482960137.003543"
                text: "three for the land"
                ts: "1483125339.020269"
                user: "U061F7AUR"
                parent_user_id: "U061F7AUR"
                type: "message"
              response_metadata:
                next_cursor: "bmV4dF90czoxNDg0Njc4MjkwNTE3MDkx"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/conversations.replies error schema"
          examples:
            application/json:
              ok: false
              error: "thread_not_found"
      security:
      - slackAuth:
        - "channels:history"
        - "groups:history"
        - "im:history"
        - "mpim:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.replies"
  /channels.replies:
    get:
      tags:
      - "channels"
      description: "Retrieve a thread of messages posted to a channel"
      operationId: "channels_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "query"
        description: "Unique identifier of a thread's parent message"
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `channels:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "query"
        description: "Channel to fetch thread from"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              has_more: false
              ok: true
              messages:
              - thread_ts: "1485913694.000025"
                last_read: "1509484885.000082"
                subscribed: true
                text: "This is a channel message"
                ts: "1485913694.000025"
                unread_count: 0
                reply_count: 2
                user: "U2X9P5FEL"
                replies:
                - ts: "1509484424.000601"
                  user: "U2U85N1RZ"
                - ts: "1509484885.000082"
                  user: "U2U85N1RZ"
                type: "message"
              - thread_ts: "1485913694.000025"
                text: "This is a thread reply"
                ts: "1509484424.000601"
                user: "U2U85N1RZ"
                parent_user_id: "U2X9P5FEL"
                type: "message"
              - thread_ts: "1485913694.000025"
                text: "This is another thread reply"
                ts: "1509484885.000082"
                user: "U2U85N1RZ"
                parent_user_id: "U2X9P5FEL"
                type: "message"
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "thread_not_found"
      security:
      - slackAuth:
        - "channels:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.replies"
  /chat.postMessage:
    post:
      tags:
      - "chat"
      description: "Sends a message to a channel."
      operationId: "chat_postMessage"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        description: "Set your bot's user name. Must be used in conjunction with `as_user`\
          \ set to false, otherwise ignored. See [authorship](#authorship) below."
        required: false
        type: "string"
        x-exportParamName: "Username"
      - name: "thread_ts"
        in: "formData"
        description: "Provide another message's `ts` value to make this message a\
          \ reply. Avoid using a reply's `ts` value; use its parent instead."
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
      - name: "attachments"
        in: "formData"
        description: "A JSON-based array of structured attachments, presented as a\
          \ URL-encoded string."
        required: false
        type: "string"
        x-exportParamName: "Attachments"
      - name: "unfurl_links"
        in: "formData"
        description: "Pass true to enable unfurling of primarily text-based content."
        required: false
        type: "boolean"
        x-exportParamName: "UnfurlLinks"
      - name: "text"
        in: "formData"
        description: "Text of the message to send. See below for an explanation of\
          \ [formatting](#formatting). This field is usually required, unless you're\
          \ providing only `attachments` instead."
        required: false
        type: "string"
        x-exportParamName: "Text"
      - name: "unfurl_media"
        in: "formData"
        description: "Pass false to disable unfurling of media content."
        required: false
        type: "boolean"
        x-exportParamName: "UnfurlMedia"
      - name: "parse"
        in: "formData"
        description: "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
        required: false
        type: "string"
        x-exportParamName: "Parse"
      - name: "as_user"
        in: "formData"
        description: "Pass true to post the message as the authed user, instead of\
          \ as a bot. Defaults to false. See [authorship](#authorship) below."
        required: false
        type: "boolean"
        x-exportParamName: "AsUser"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "mrkdwn"
        in: "formData"
        description: "Disable Slack markup parsing by setting to `false`. Enabled\
          \ by default."
        required: false
        type: "boolean"
        x-exportParamName: "Mrkdwn"
      - name: "icon_emoji"
        in: "formData"
        description: "Emoji to use as the icon for this message. Overrides `icon_url`.\
          \ Must be used in conjunction with `as_user` set to `false`, otherwise ignored.\
          \ See [authorship](#authorship) below."
        required: false
        type: "string"
        x-exportParamName: "IconEmoji"
      - name: "link_names"
        in: "formData"
        description: "Find and link channel names and usernames."
        required: false
        type: "boolean"
        x-exportParamName: "LinkNames"
      - name: "icon_url"
        in: "formData"
        description: "URL to an image to use as the icon for this message. Must be\
          \ used in conjunction with `as_user` set to false, otherwise ignored. See\
          \ [authorship](#authorship) below."
        required: false
        type: "string"
        x-exportParamName: "IconUrl"
      - name: "channel"
        in: "formData"
        description: "Channel, private group, or IM channel to send message to. Can\
          \ be an encoded ID, or a name. See [below](#channels) for more details."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "reply_broadcast"
        in: "formData"
        description: "Used in conjunction with `thread_ts` and indicates whether reply\
          \ should be made visible to everyone in the channel or conversation. Defaults\
          \ to `false`."
        required: false
        type: "boolean"
        x-exportParamName: "ReplyBroadcast"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/chat.postMessage success schema"
          examples:
            application/json:
              message:
                username: "ecto1"
                attachments:
                - text: "This is an attachment"
                  fallback: "This is an attachment's fallback"
                  id: 1
                text: "Here's a message for you"
                ts: "1503435956.000247"
                subtype: "bot_message"
                type: "message"
                bot_id: "B19LU7CSY"
              ok: true
              ts: "1503435956.000247"
              channel: "C1H9RESGL"
        default:
          description: "Typical error response if too many attachments are included"
          schema:
            $ref: "#/definitions/chat.postMessage error schema"
          examples:
            application/json:
              ok: false
              error: "too_many_attachments"
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.postMessage"
  /users.setActive:
    post:
      tags:
      - "users"
      description: "Marked a user as active. Deprecated and non-functional."
      operationId: "users_setActive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `users:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "users:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.setActive"
  /conversations.archive:
    post:
      tags:
      - "conversations"
      description: "Archives a conversation."
      operationId: "conversations_archive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to archive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/conversations.archive success schema"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/conversations.archive error schema"
          examples:
            application/json:
              ok: false
              error: "channel_not_found"
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.archive"
  /team.profile.get:
    get:
      tags:
      - "team.profile"
      - "team"
      description: "Retrieve a team's profile."
      operationId: "team_profile_get"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users.profile:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "visibility"
        in: "query"
        description: "Filter by visibility."
        required: false
        type: "string"
        x-exportParamName: "Visibility"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/team.profile.get success schema"
          examples:
            application/json:
              profile:
                fields:
                - hint: "Enter the extension to reach your desk"
                  ordering: 0
                  possible_values: null
                  label: "Phone extension"
                  options: null
                  is_hidden: 1
                  type: "text"
                  id: "Xf06054AAA"
                - hint: "When you were born"
                  ordering: 1
                  possible_values: null
                  label: "Date of birth"
                  options: null
                  type: "date"
                  id: "Xf06054BBB"
                - hint: "Enter a link to your Facebook profile"
                  ordering: 2
                  possible_values: null
                  label: "Facebook"
                  options: null
                  type: "link"
                  id: "Xf06054CCC"
                - hint: "Hogwarts, obviously"
                  ordering: 3
                  possible_values:
                  - "Gryffindor"
                  - "Hufflepuff"
                  - "Ravenclaw"
                  - "Slytherin"
                  label: "House"
                  options: null
                  type: "options_list"
                  id: "Xf06054DDD"
                - hint: "Office location (LDAP)"
                  ordering: 4
                  possible_values: null
                  label: "Location"
                  options:
                    is_protected: 1
                  type: "text"
                  id: "Xf06054EEE"
                - hint: "The boss"
                  ordering: 5
                  possible_values: null
                  label: "Manager"
                  options: null
                  type: "user"
                  id: "Xf06054FFF"
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/team.profile.get error schema"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "users.profile:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.profile.get"
  /groups.archive:
    post:
      tags:
      - "groups"
      description: "Archives a private channel."
      operationId: "groups_archive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Private channel to archive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.archive"
  /groups.unarchive:
    post:
      tags:
      - "groups"
      description: "Unarchives a private channel."
      operationId: "groups_unarchive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Private channel to unarchive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.unarchive"
  /stars.remove:
    post:
      tags:
      - "stars"
      description: "Removes a star from an item."
      operationId: "stars_remove"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "file_comment"
        in: "formData"
        description: "File comment to remove star from."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to remove star from."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `stars:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
      - name: "channel"
        in: "formData"
        description: "Channel to remove star from, or channel where the message to\
          \ remove star from was posted (used with `timestamp`)."
        required: false
        type: "string"
        x-exportParamName: "Channel"
      - name: "file"
        in: "formData"
        description: "File to remove star from."
        required: false
        type: "string"
        x-exportParamName: "File"
      responses:
        200:
          description: "Typical success response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: true
        default:
          description: "Typical error response"
          schema:
            $ref: "#/definitions/Default success template"
          examples:
            application/json:
              ok: false
              error: "invalid_auth"
      security:
      - slackAuth:
        - "stars:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/stars.remove"
securityDefinitions:
  slackAuth:
    type: "oauth2"
    authorizationUrl: "https://slack.com/oauth/authorize"
    tokenUrl: "https://slack.com/api/oauth.access"
    flow: "accessCode"
    scopes:
      dnd:read: "dnd:read"
      users:read.email: "users:read.email"
      im:read: "im:read"
      channels:write: "channels:write"
      chat:write:bot: "Author messages as a bot"
      chat:write:user: "chat:write:user"
      identity.basic: "identity.basic"
      bot: "Bot user scope"
      tokens.basic: "tokens.basic"
      groups:write: "groups:write"
      conversations:history: "conversations:history"
      reactions:read: "reactions:read"
      search:read: "search:read"
      reminders:read: "reminders:read"
      emoji:read: "emoji:read"
      mpim:write: "mpim:write"
      stars:read: "stars:read"
      users.profile:read: "users.profile:read"
      pins:write: "pins:write"
      usergroups:write: "usergroups:write"
      usergroups:read: "usergroups:read"
      channels:history: "channels:history"
      groups:history: "groups:history"
      dnd:write: "dnd:write"
      files:write:user: "files:write:user"
      files:read: "files:read"
      mpim:read: "mpim:read"
      channels:read: "channels:read"
      links:write: "links:write"
      conversations:read: "conversations:read"
      users:write: "users:write"
      team:read: "team:read"
      pins:read: "pins:read"
      none: "No scope required"
      stars:write: "stars:write"
      im:write: "im:write"
      admin: "admin"
      groups:read: "groups:read"
      chat:write: "chat:write"
      conversations:write: "conversations:write"
      users.profile:write: "users.profile:write"
      mpim:history: "mpim:history"
      reactions:write: "reactions:write"
      rtm:stream: "rtm:stream"
      users:read: "users:read"
      reminders:write: "reminders:write"
      im:history: "im:history"
definitions:
  objs_im:
    type: "object"
    required:
    - "created"
    - "id"
    - "is_im"
    - "is_org_shared"
    - "is_user_deleted"
    - "user"
    properties:
      is_org_shared:
        type: "boolean"
      created:
        type: "integer"
      is_user_deleted:
        type: "boolean"
      priority:
        type: "integer"
      user:
        type: "string"
      is_im:
        type: "boolean"
      id:
        type: "string"
    title: "IM Object"
  objs_user:
    type: "object"
    required:
    - "color"
    - "deleted"
    - "id"
    - "is_admin"
    - "is_app_user"
    - "is_bot"
    - "is_owner"
    - "is_primary_owner"
    - "is_restricted"
    - "is_ultra_restricted"
    - "name"
    - "profile"
    - "real_name"
    - "team_id"
    - "tz"
    - "tz_label"
    - "tz_offset"
    - "updated"
    properties:
      profile:
        $ref: "#/definitions/objs_user_profile"
      updated:
        type: "number"
      tz:
        type: "string"
      name:
        type: "string"
      deleted:
        type: "boolean"
      is_app_user:
        type: "boolean"
      is_bot:
        type: "boolean"
      tz_label:
        type: "string"
      real_name:
        type: "string"
      locale:
        type: "string"
      team_id:
        type: "string"
      is_admin:
        type: "boolean"
      is_ultra_restricted:
        type: "boolean"
      is_owner:
        type: "boolean"
      is_restricted:
        type: "boolean"
      tz_offset:
        type: "number"
      has_2fa:
        type: "boolean"
      id:
        type: "string"
      color:
        type: "string"
        pattern: "^[a-fA-F0-9]{6}$"
      is_primary_owner:
        type: "boolean"
  defs_comment_id:
    type: "string"
    title: "File Comment ID"
  defs_bot_id:
    type: "string"
    title: "Bot User ID"
  objs_paging:
    type: "object"
    required:
    - "count"
    - "page"
    - "total"
    properties:
      count:
        type: "integer"
      total:
        type: "integer"
      page:
        type: "integer"
      pages:
        type: "integer"
    title: "paging object for files"
  defs_team:
    type: "string"
    title: "Team ID"
  objs_file_object_with_id_only:
    type: "string"
    title: "file object with ID only"
  defs_ts:
    type: "string"
    title: "Timestamp in format 0123456789.012345"
  objs_file:
    type: "object"
    properties:
      thumb_480_w:
        type: "integer"
      reactions:
        type: "array"
        items:
          $ref: "#/definitions/objs_reaction"
      image_exif_rotation:
        type: "integer"
      filetype:
        type: "string"
      thumb_800_h:
        type: "integer"
      thumb_480:
        type: "string"
        format: "uri"
      display_as_bot:
        type: "boolean"
      thumb_800_w:
        type: "integer"
      thumb_64:
        type: "string"
        format: "uri"
      size:
        type: "integer"
      original_h:
        type: "integer"
      thumb_360_w:
        type: "integer"
      title:
        type: "string"
      url_private:
        type: "string"
        format: "uri"
      thumb_720_h:
        type: "integer"
      thumb_360:
        type: "string"
        format: "uri"
      id:
        type: "string"
      ims:
        type: "array"
        items:
          $ref: "#/definitions/objs_im"
      thumb_720_w:
        type: "integer"
      thumb_80:
        type: "string"
        format: "uri"
      comments_count:
        type: "integer"
      thumb_360_h:
        type: "integer"
      thumb_480_h:
        type: "integer"
      original_w:
        type: "integer"
      username:
        type: "string"
      thumb_800:
        type: "string"
        format: "uri"
      timestamp:
        type: "integer"
      public_url_shared:
        type: "boolean"
      editable:
        type: "boolean"
      thumb_160:
        type: "string"
        format: "uri"
      external_type:
        type: "string"
      url_private_download:
        type: "string"
        format: "uri"
      thumb_1024:
        type: "string"
        format: "uri"
      user:
        type: "string"
      groups:
        type: "array"
        items:
          $ref: "#/definitions/objs_group"
      thumb_960:
        type: "string"
        format: "uri"
      is_public:
        type: "boolean"
      pretty_type:
        type: "string"
      name:
        type: "string"
      mimetype:
        type: "string"
      permalink_public:
        type: "string"
        format: "uri"
      permalink:
        type: "string"
        format: "uri"
      is_external:
        type: "boolean"
      created:
        type: "integer"
      thumb_1024_h:
        type: "integer"
      thumb_960_h:
        type: "integer"
      pinned_to:
        type: "array"
        items:
          type: "string"
      thumb_960_w:
        type: "integer"
      thumb_1024_w:
        type: "integer"
      mode:
        type: "string"
      thumb_720:
        type: "string"
        format: "uri"
      channels:
        type: "array"
        items:
          type: "string"
    title: "file object"
  objs_user_profile:
    type: "object"
    required:
    - "avatar_hash"
    - "display_name"
    - "display_name_normalized"
    - "image_192"
    - "image_24"
    - "image_32"
    - "image_48"
    - "image_72"
    - "real_name"
    - "real_name_normalized"
    properties:
      last_name:
        type: "string"
      status_emoji:
        type: "string"
      display_name_normalized:
        type: "string"
      email:
        type: "string"
        format: "email"
      image_32:
        type: "string"
        format: "uri"
      skype:
        type: "string"
      image_72:
        type: "string"
        format: "uri"
      status_expiration:
        type: "integer"
      image_192:
        type: "string"
        format: "uri"
      first_name:
        type: "string"
      display_name:
        type: "string"
      title:
        type: "string"
      real_name_normalized:
        type: "string"
      always_active:
        type: "boolean"
      status_text_canonical:
        type: "string"
      image_24:
        type: "string"
        format: "uri"
      phone:
        type: "string"
      image_48:
        type: "string"
        format: "uri"
      guest_channels:
        type: "string"
      image_original:
        type: "string"
        format: "uri"
      fields:
        type: "object"
        properties: {}
      real_name:
        type: "string"
      image_512:
        type: "string"
        format: "uri"
      team:
        type: "string"
      avatar_hash:
        type: "string"
      status_text:
        type: "string"
    title: "User profile object"
  defs_room_id:
    type: "string"
    title: "Room ID for a slack call"
  defs_channel_id:
    type: "string"
    title: "Channel ID"
  defs_channel_name:
    type: "string"
    title: "Name of a channel"
  objs_team_profile_field:
    type: "object"
    required:
    - "hint"
    - "id"
    - "label"
    - "options"
    - "ordering"
    - "type"
    properties:
      hint:
        type: "string"
      ordering:
        type: "number"
      type:
        type: "string"
        enum:
        - "text"
        - "date"
        - "link"
        - "mailto"
        - "options_list"
        - "user"
      possible_values:
        type: "array"
        items:
          type: "string"
      label:
        type: "string"
      id:
        type: "string"
        pattern: "^X[a-zA-Z0-9]{9}$"
      is_hidden:
        type: "boolean"
      field_name:
        type: "string"
      options:
        type: "array"
        items:
          type: "string"
  defs_dm_id:
    type: "string"
    title: "Direct Message Channel ID"
  defs_channel:
    type: "string"
    title: "Channel-like conversation ID"
  objs_comment:
    type: "object"
    properties:
      comment:
        type: "string"
      reactions:
        type: "array"
        items:
          $ref: "#/definitions/objs_reaction"
      created:
        type: "integer"
      timestamp:
        type: "integer"
      pinned_to:
        type: "array"
        items:
          type: "string"
      is_intro:
        type: "boolean"
      user:
        type: "string"
      id:
        type: "string"
    title: "File Comment Object"
  objs_channel:
    type: "object"
    required:
    - "created"
    - "creator"
    - "id"
    - "is_channel"
    - "is_mpim"
    - "is_org_shared"
    - "is_private"
    - "is_shared"
    - "members"
    - "name"
    - "name_normalized"
    - "purpose"
    - "topic"
    properties:
      is_general:
        type: "boolean"
      name_normalized:
        type: "string"
      last_read:
        type: "string"
      creator:
        type: "string"
      is_member:
        type: "boolean"
      is_archived:
        type: "boolean"
      topic:
        $ref: "#/definitions/objs_channel_topic"
      unread_count_display:
        type: "integer"
      id:
        type: "string"
      is_org_shared:
        type: "boolean"
      is_channel:
        type: "boolean"
      name:
        type: "string"
      priority:
        type: "integer"
      is_moved:
        type: "integer"
      accepted_user:
        type: "string"
      is_pending_ext_shared:
        type: "boolean"
      is_mpim:
        type: "boolean"
      is_read_only:
        type: "boolean"
      purpose:
        $ref: "#/definitions/objs_channel_topic"
      members:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
        minItems: 0
      is_private:
        type: "boolean"
      previous_names:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
        minItems: 0
      num_members:
        type: "integer"
      is_shared:
        type: "boolean"
      created:
        type: "integer"
      pending_shared:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
        minItems: 0
      unread_count:
        type: "integer"
      unlinked:
        type: "integer"
        title: "Field to determine whether a channel has ever been shared/disconnected\
          \ in the past"
    title: "Channel Object"
  defs_topic_purpose_creator:
    type: "string"
    title: "User ID or empty string, used for topic and purpose creation"
  defs_invite_id:
    type: "integer"
    title: "Invite ID for an external shared channel"
  defs_file_id:
    type: "string"
    title: "File ID"
  defs_group_id:
    type: "string"
    title: "Private Channel ID"
  defs_user_id:
    type: "string"
    title: "User ID"
  objs_group:
    type: "object"
    required:
    - "created"
    - "creator"
    - "id"
    - "is_group"
    - "members"
    - "name"
    - "name_normalized"
    - "purpose"
    - "topic"
    properties:
      is_pending_ext_shared:
        type: "boolean"
      name_normalized:
        type: "string"
      name:
        type: "string"
      last_read:
        type: "string"
      creator:
        type: "string"
      is_moved:
        type: "integer"
      is_mpim:
        type: "boolean"
      is_archived:
        type: "boolean"
      created:
        type: "integer"
      is_group:
        type: "boolean"
      topic:
        $ref: "#/definitions/objs_channel_topic"
      unread_count:
        type: "integer"
      is_open:
        type: "boolean"
      purpose:
        $ref: "#/definitions/objs_channel_topic"
      members:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
        minItems: 1
      priority:
        type: "integer"
      id:
        type: "string"
      unread_count_display:
        type: "integer"
    title: "Group object"
  objs_reaction:
    type: "object"
    required:
    - "count"
    - "name"
    - "users"
    properties:
      count:
        type: "integer"
      name:
        type: "string"
      users:
        type: "array"
        items:
          type: "string"
    title: "Reaction object"
  defs_ok_false:
    type: "boolean"
    title: "default failure response"
    enum:
    - "false"
  objs_inviting_user:
    type: "object"
    required:
    - "id"
    - "is_app_user"
    - "is_restricted"
    - "is_ultra_restricted"
    - "name"
    - "profile"
    - "team_id"
    - "updated"
    properties:
      profile:
        $ref: "#/definitions/objs_user_profile_shortest"
      updated:
        type: "number"
      name:
        type: "string"
      is_app_user:
        type: "boolean"
      real_name:
        type: "string"
      team_id:
        type: "string"
      is_ultra_restricted:
        type: "boolean"
      is_restricted:
        type: "boolean"
      id:
        type: "string"
  objs_user_profile_short:
    type: "object"
    required:
    - "avatar_hash"
    - "display_name"
    - "first_name"
    - "image_72"
    - "is_restricted"
    - "is_ultra_restricted"
    - "name"
    - "real_name"
    - "team"
    properties:
      first_name:
        type: "string"
      display_name:
        type: "string"
      name:
        type: "string"
      team:
        type: "string"
      real_name:
        type: "string"
      avatar_hash:
        type: "string"
      is_ultra_restricted:
        type: "boolean"
      is_restricted:
        type: "boolean"
      image_72:
        type: "string"
        format: "uri"
  objs_comments:
    title: "file comments object"
    type: "array"
    items:
      $ref: "#/definitions/objs_comment"
  defs_ok_true:
    type: "boolean"
    title: "default success response"
    enum:
    - "true"
  objs_conversation: {}
  objs_team:
    type: "object"
    required:
    - "domain"
    - "email_domain"
    - "icon"
    - "id"
    - "name"
    properties:
      domain:
        type: "string"
      name:
        type: "string"
      enterprise_name:
        type: "string"
      id:
        type: "string"
      email_domain:
        type: "string"
      has_compliance_export:
        type: "boolean"
      enterprise_id:
        type: "string"
      icon:
        $ref: "#/definitions/objs_team_icon"
    title: "Team Object"
  objs_user_profile_shortest:
    type: "object"
    required:
    - "avatar_hash"
    - "display_name"
    - "first_name"
    - "image_72"
    - "real_name"
    - "team"
    properties:
      first_name:
        type: "string"
      display_name:
        type: "string"
      team:
        type: "string"
      real_name:
        type: "string"
      avatar_hash:
        type: "string"
      image_72:
        type: "string"
        format: "uri"
  objs_message:
    type: "object"
    required:
    - "text"
    - "ts"
    - "type"
    properties:
      comment:
        $ref: "#/definitions/objs_comment"
      reactions:
        type: "array"
        items:
          $ref: "#/definitions/objs_reaction"
      attachments:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_message_attachments"
        minItems: 1
      last_read:
        type: "string"
      text:
        type: "string"
      topic:
        type: "string"
      display_as_bot:
        type: "boolean"
      reply_count:
        type: "integer"
      file:
        $ref: "#/definitions/objs_file"
      replies:
        type: "array"
        items:
          $ref: "#/definitions/conversations.replies success schema_replies"
      user_team:
        type: "string"
      subscribed:
        type: "boolean"
      icons:
        $ref: "#/definitions/objs_message_icons"
      purpose:
        type: "string"
      ts:
        type: "string"
      subtype:
        type: "string"
      type:
        type: "string"
      username:
        type: "string"
      source_team:
        type: "string"
      user_profile:
        $ref: "#/definitions/objs_user_profile_short"
      user:
        type: "string"
      old_name:
        type: "string"
      thread_ts:
        type: "string"
      permalink:
        type: "string"
        format: "uri"
      name:
        type: "string"
      upload:
        type: "boolean"
      pinned_to:
        type: "array"
        items:
          type: "string"
      unread_count:
        type: "integer"
      is_intro:
        type: "boolean"
      team:
        type: "string"
      inviter:
        type: "string"
    title: "Message object"
  chat.delete success schema:
    required:
    - "channel"
    - "ok"
    - "ts"
    properties:
      ok:
        type: "boolean"
      ts:
        type: "string"
      channel:
        type: "string"
    description: "Schema for successful response of chat.delete method"
  files.comments.edit schema:
    required:
    - "comment"
    - "ok"
    properties:
      comment:
        $ref: "#/definitions/objs_comment"
      ok:
        type: "boolean"
    description: "Schema for successful response files.comments.edit method"
  files.comments.edit error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "cant_edit"
        - "comment_not_found"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response files.comments.edit method"
  mpim.open success schema:
    required:
    - "group"
    - "ok"
    properties:
      ok:
        type: "boolean"
      group:
        $ref: "#/definitions/objs_group"
    description: "Schema for successful response from mpim.open method"
  mpim.open error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "users_list_not_supplied"
        - "not_enough_users"
        - "too_many_users"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from mpim.open method"
  Default success template:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Verbose schema not yet ready for this method."
  conversations.close success schema:
    required:
    - "ok"
    properties:
      no_op:
        type: "boolean"
      ok:
        type: "boolean"
      already_closed:
        type: "boolean"
    description: "Schema for successful response conversations.close method"
  conversations.close error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "channel_not_found"
        - "user_does_not_own_channel"
        - "missing_scope"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.close method"
  im.open success schema_channel:
    required:
    - "id"
    properties:
      last_read:
        type: "string"
      created:
        type: "string"
      unread_count:
        type: "number"
      is_open:
        type: "boolean"
      user:
        type: "string"
      unread_count_display:
        type: "number"
      is_im:
        type: "boolean"
      id:
        type: "string"
      latest:
        $ref: "#/definitions/objs_message"
  im.open success schema:
    required:
    - "channel"
    - "ok"
    properties:
      no_op:
        type: "boolean"
      already_open:
        type: "boolean"
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/im.open success schema_channel"
    description: "Schema for successful response from im.open method"
  im.open error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "user_not_found"
        - "user_not_visible"
        - "user_disabled"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from im.open method"
  groups.list success schema:
    required:
    - "groups"
    - "ok"
    properties:
      ok:
        type: "boolean"
      groups:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_group"
        minItems: 1
    description: "Schema for successful response groups.list method"
  groups.list error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response groups.list method"
  channels.archive success schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response from channels.archive method"
  channels.archive error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "already_archived"
        - "cant_archive_general"
        - "restricted_action"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
    description: "Schema for error response channels.archive method"
  channels.info success schema:
    required:
    - "channel"
    - "ok"
    properties:
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_channel"
    description: "Schema for successful response channels.info method"
  channels.info error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
    description: "Schema for error response channels.info method"
  groups.mark success schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response from groups.mark method"
  groups.mark error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "invalid_timestamp"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from groups.mark method"
  channels.history success schema:
    required:
    - "has_more"
    - "messages"
    - "ok"
    properties:
      has_more:
        type: "boolean"
      ok:
        type: "boolean"
      messages:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_message"
        minItems: 1
    description: "Schema for successful response channels.history method"
  channels.history error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "invalid_ts_latest"
        - "invalid_ts_oldest"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response channels.history method"
  im.mark success schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response im.mark method"
  im.mark error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "invalid_timestamp"
        - "not_in_channel"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response im.mark method"
  files.upload schema:
    required:
    - "file"
    - "ok"
    properties:
      ok:
        type: "boolean"
      file:
        $ref: "#/definitions/objs_file"
    description: "Schema for successful response files.upload method"
  files.upload error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "posting_to_general_channel_denied"
        - "invalid_channel"
        - "file_uploads_disabled"
        - "file_uploads_except_images_disabled"
        - "storage_limit_reached"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response files.upload method"
  users.info success schema:
    required:
    - "ok"
    - "user"
    properties:
      ok:
        type: "boolean"
      user:
        $ref: "#/definitions/objs_user"
    description: "Schema for successful response from users.info method"
  users.info error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "user_not_found"
        - "user_not_visible"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from users.info method"
  users.lookupByEmail success schema:
    required:
    - "ok"
    - "user"
    properties:
      ok:
        type: "boolean"
      user:
        $ref: "#/definitions/objs_user"
    description: "Schema for successful response from users.lookupByEmail method"
  users.lookupByEmail error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "users_not_found"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "fatal_error"
    description: "Schema for error response from users.lookupByEmail method"
  reactions.list schema_items:
    required:
    - "type"
    properties:
      message:
        $ref: "#/definitions/objs_message"
      type:
        type: "string"
        enum:
        - "file"
        - "file_comment"
        - "message"
      channel:
        type: "string"
      comment:
        $ref: "#/definitions/objs_comment"
      file:
        $ref: "#/definitions/objs_file"
  reactions.list schema:
    required:
    - "items"
    - "ok"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/reactions.list schema_items"
      paging:
        $ref: "#/definitions/objs_paging"
      ok:
        type: "boolean"
    description: "Schema for successful response from reactions.list method"
  reactions.list error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "user_not_found"
        - "not_authed"
        - "invalid_auth"
        - "account_inactiv"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "fatal_error"
    description: "Schema for error response from reactions.list method"
  conversations.create success schema:
    required:
    - "channel"
    - "ok"
    properties:
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_conversation"
    description: "Schema for successful response conversations.create method"
  conversations.create error schema:
    required:
    - "error"
    - "ok"
    properties:
      provided:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "name_taken"
        - "restricted_action"
        - "no_channel"
        - "invalid_name_required"
        - "invalid_name_punctuation"
        - "invalid_name_maxlength"
        - "invalid_name_specials"
        - "invalid_name"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      detail:
        type: "string"
      needed:
        type: "string"
    description: "Schema for error response from conversations.create method"
  files.comments.delete schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response files.comments.delete method"
  files.comments.delete error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "cant_delete"
        - "comment_not_found"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response files.comments.delete method"
  reactions.add schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response from reactions.add method"
  reactions.add error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "bad_timestamp"
        - "file_not_found"
        - "file_comment_not_found"
        - "message_not_found"
        - "no_item_specified"
        - "invalid_name"
        - "already_reacted"
        - "too_many_emoji"
        - "too_many_reactions"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from reactions.add method"
  chat.unfurl success schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response of chat.unfurl method"
  conversations.unarchive success schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response from conversations.unarchive method"
  conversations.unarchive error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "channel_not_found"
        - "not_archived"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.unarchive method"
  groups.info success schema:
    required:
    - "group"
    - "ok"
    properties:
      ok:
        type: "boolean"
      group:
        $ref: "#/definitions/objs_group"
    description: "Schema for successful response groups.info method"
  groups.info error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response groups.info method"
  conversations.list success schema_response_metadata:
    required:
    - "next_cursor"
    properties:
      next_cursor:
        type: "string"
  conversations.list success schema:
    required:
    - "channels"
    - "ok"
    properties:
      channels:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_conversation"
      ok:
        type: "boolean"
      response_metadata:
        $ref: "#/definitions/conversations.list success schema_response_metadata"
    description: "Schema for successful response from conversations.list method"
  conversations.list error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "missing_scope"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.list method"
  reactions.get error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "bad_timestamp"
        - "file_not_found"
        - "file_comment_not_found"
        - "message_not_found"
        - "no_item_specified"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from reactions.get method"
  im.history success schema:
    required:
    - "has_more"
    - "messages"
    - "ok"
    properties:
      has_more:
        type: "boolean"
      ok:
        type: "boolean"
      messages:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_message"
        minItems: 1
    description: "Schema for successful response from im.history method"
  im.history error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "invalid_ts_latest"
        - "invalid_ts_oldest"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from im.history method"
  pins.add schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response from pins.add method"
  pins.add error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "bad_timestamp"
        - "file_not_found"
        - "file_comment_not_found"
        - "message_not_found"
        - "channel_not_found"
        - "no_item_specified"
        - "already_pinned"
        - "permission_denied"
        - "file_not_shared"
        - "not_pinnable"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from pins.add method"
  chat.getPermalink success schema:
    required:
    - "channel"
    - "ok"
    - "permalink"
    properties:
      permalink:
        type: "string"
      ok:
        type: "boolean"
      channel:
        type: "string"
    description: "Schema for successful response chat.getPermalink"
  files.list schema:
    required:
    - "files"
    - "ok"
    - "paging"
    properties:
      files:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_file"
        minItems: 0
      paging:
        $ref: "#/definitions/objs_paging"
      ok:
        type: "boolean"
    description: "Schema for successful response from files.list method"
  files.list error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "user_not_found"
        - "unknown_type"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "user_is_bot"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from files.list method"
  conversations.setTopic success schema:
    required:
    - "channel"
    - "ok"
    properties:
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_conversation"
    description: "Schema for successful response from conversations.setTopic method"
  conversations.setTopic error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "channel_not_found"
        - "not_in_channel"
        - "is_archived"
        - "too_long"
        - "user_is_restricted"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.setTopic method"
  conversations.members success schema:
    required:
    - "members"
    - "ok"
    - "response_metadata"
    properties:
      ok:
        type: "boolean"
      members:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
        minItems: 1
      response_metadata:
        $ref: "#/definitions/conversations.list success schema_response_metadata"
    description: "Schema for successful response conversations.members method"
  conversations.members error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "invalid_limit"
        - "invalid_cursor"
        - "fetch_members_failed"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response conversations.members method"
  conversations.open success schema:
    required:
    - "channel"
    - "ok"
    properties:
      no_op:
        type: "boolean"
      already_open:
        type: "boolean"
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_conversation"
    description: "Schema for successful response from conversations.open method when\
      \ opening channels, ims, mpims"
  conversations.open error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "user_not_found"
        - "user_not_visible"
        - "user_disabled"
        - "users_list_not_supplied"
        - "not_enough_users"
        - "too_many_users"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "channel_not_found"
    description: "Schema for error response from conversations.open method"
  pins.remove schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response from pins.remove method"
  pins.remove error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "bad_timestamp"
        - "file_not_found"
        - "file_comment_not_found"
        - "message_not_found"
        - "no_item_specified"
        - "not_pinned"
        - "permission_denied"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_typ"
        - "missing_post_typ"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeou"
        - "upgrade_required"
    description: "Schema for error response from pins.remove method"
  files.delete schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response files.delete method"
  files.delete error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "file_not_found"
        - "file_deleted"
        - "cant_delete_file"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response files.delete method"
  pins.list error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from pins.list method"
  API method users.getPresence:
    required:
    - "ok"
    - "presence"
    properties:
      manual_away:
        type: "boolean"
      presence:
        type: "string"
      last_activity:
        type: "integer"
      online:
        type: "boolean"
      ok:
        type: "boolean"
      connection_count:
        type: "integer"
      auto_away:
        type: "boolean"
    description: "Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65"
  conversations.leave success schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
      not_in_channel:
        type: "boolean"
    description: "Schema for successful response from conversations.leave method"
  conversations.leave error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "last_member"
        - "missing_scope"
        - "channel_not_found"
        - "is_archived"
        - "cant_leave_general"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.leave method"
  files.info schema:
    required:
    - "comments"
    - "file"
    - "ok"
    - "paging"
    properties:
      paging:
        $ref: "#/definitions/objs_paging"
      ok:
        type: "boolean"
      file:
        $ref: "#/definitions/objs_file"
      comments:
        $ref: "#/definitions/objs_comments"
    description: "Schema for successful response from files.info method"
  files.info error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "file_not_found"
        - "file_deleted"
        - "timezone_count_failed"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from files.info method"
  channels.mark success schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response channels.mark method"
  channels.mark error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "invalid_timestamp"
        - "not_in_channel"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response channels.mark method"
  conversations.kick success schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response conversations.kick method"
  conversations.kick error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "channel_not_found"
        - "user_not_found"
        - "cant_kick_self"
        - "not_in_channel"
        - "cant_kick_from_general"
        - "restricted_action"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response conversations.kick method"
  chat.postEphemeral success schema:
    required:
    - "message_ts"
    - "ok"
    properties:
      ok:
        type: "boolean"
      message_ts:
        type: "string"
    description: "Schema for successful response of chat.postEphemeral method"
  conversations.rename success schema:
    required:
    - "channel"
    - "ok"
    properties:
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_conversation"
    description: "Schema for successful response from conversations.rename method"
  conversations.rename error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "user_is_restricted"
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "channel_not_found"
        - "not_in_channel"
        - "not_authorized"
        - "invalid_name"
        - "name_taken"
        - "invalid_name_required"
        - "invalid_name_punctuation"
        - "invalid_name_maxlength"
        - "invalid_name_specials"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.rename method"
  HTTP 200 response schema for migration.exchange:
    required:
    - "enterprise_id"
    - "ok"
    - "team_id"
    properties:
      team_id:
        type: "string"
        title: "The workspace/team ID containing the mapped users"
      ok:
        type: "boolean"
      enterprise_id:
        type: "string"
        title: "The enterprise grid organization ID containing the workspace/team."
      invalid_user_ids:
        type: "array"
        title: "A list of User IDs that cannot be mapped or found"
        items:
          type: "string"
      user_id_map:
        type: "object"
        title: "A mapping of provided user IDs with mapped user IDs"
        properties: {}
    description: "Bulk exchange local workspace user IDs for global IDs"
  chat.update success schema:
    required:
    - "channel"
    - "ok"
    - "text"
    - "ts"
    properties:
      text:
        type: "string"
        title: "Updated message text"
      ok:
        type: "boolean"
      ts:
        type: "string"
      channel:
        type: "string"
    description: "Schema for successful response of chat.update method"
  chat.update error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "message_not_found"
        - "cant_update_message"
        - "channel_not_found"
        - "edit_window_closed"
        - "msg_too_long"
        - "too_many_attachments"
        - "rate_limited"
        - "no_text"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "token_revoked"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "request_timeout"
        - "invalid_json"
        - "json_not_object"
        - "upgrade_required"
        - "fatal_error"
    description: "Schema for error response chat.update method"
  groups.invite success schema:
    required:
    - "group"
    - "ok"
    properties:
      ok:
        type: "boolean"
      group:
        $ref: "#/definitions/objs_group"
    description: "Schema for successful response groups.invite method"
  groups.invite error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "user_not_found"
        - "cant_invite_self"
        - "is_archived"
        - "cant_invite"
        - "ura_max_channels"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response groups.invite method"
  team.info schema:
    required:
    - "ok"
    - "team"
    properties:
      ok:
        type: "boolean"
      team:
        $ref: "#/definitions/objs_team"
    description: "Schema for successful response from team.info method"
  team.info error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "token_revokedno_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "fatal_error"
    description: "Schema for error response from team.info method"
  conversations.history success schema:
    required:
    - "has_more"
    - "messages"
    - "ok"
    - "pin_count"
    properties:
      has_more:
        type: "boolean"
      ok:
        type: "boolean"
      messages:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_message"
        minItems: 1
      pin_count:
        type: "integer"
    description: "Schema for successful response from conversations.history method"
  conversations.history error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "missing_scope"
        - "channel_not_found"
        - "invalid_ts_latest"
        - "invalid_ts_oldest"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.history method"
  channels.create error schema:
    required:
    - "channel"
    - "ok"
    properties:
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_channel"
    description: "Schema for successful response channels.create method"
  channels.create error schema_1:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "name_taken"
        - "restricted_action"
        - "no_channel"
        - "invalid_name_required"
        - "invalid_name_punctuation"
        - "invalid_name_maxlength"
        - "invalid_name_specials"
        - "invalid_name"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
    description: "Schema for error response channels.create method"
  groups.create success schema:
    required:
    - "group"
    - "ok"
    properties:
      ok:
        type: "boolean"
      group:
        $ref: "#/definitions/objs_group"
    description: "Schema for successful response groups.create method"
  groups.create error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "no_channel"
        - "restricted_action"
        - "name_taken"
        - "invalid_name_required"
        - "invalid_name_punctuation"
        - "invalid_name_maxlength"
        - "invalid_name_specials"
        - "invalid_name"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response groups.create method"
  conversations.list success schema_1:
    required:
    - "channels"
    - "ok"
    properties:
      channels:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_conversation"
      ok:
        type: "boolean"
      response_metadata:
        $ref: "#/definitions/conversations.list success schema_response_metadata"
    description: "Schema for successful response from users.conversations method.\
      \ Returned conversation objects do not include `num_members` or `is_member`"
  conversations.setPurpose success schema:
    required:
    - "channel"
    - "ok"
    properties:
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_conversation"
    description: "Schema for successful response from conversations.setPurpose method"
  conversations.setPurpose error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "channel_not_found"
        - "not_in_channel"
        - "is_archived"
        - "too_long"
        - "user_is_restricted"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.setPurpose method"
  Response metadata:
    properties:
      warnings:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
        minItems: 1
  conversations.join success schema:
    required:
    - "channel"
    - "ok"
    properties:
      warning:
        type: "string"
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_conversation"
      response_metadata:
        $ref: "#/definitions/Response metadata"
    description: "Schema for successful response from conversations.join method"
  conversations.join error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "channel_not_found"
        - "is_archived"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.join method"
  conversations.info success schema:
    required:
    - "channel"
    - "ok"
    properties:
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_conversation"
    description: "Schema for successful response conversations.info"
  conversations.info error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "missing_scope"
        - "channel_not_found"
        - "team_added_to_org"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.info method"
  groups.history success schema:
    required:
    - "has_more"
    - "messages"
    - "ok"
    properties:
      has_more:
        type: "boolean"
      ok:
        type: "boolean"
      messages:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_message"
        minItems: 1
    description: "Schema for successful response groups.history method"
  groups.history error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "invalid_ts_latest"
        - "invalid_ts_oldest"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response groups.history method"
  reactions.remove schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response from reactions.remove method"
  reactions.remove error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "bad_timestamp"
        - "file_not_found"
        - "file_comment_not_found"
        - "message_not_found"
        - "no_item_specified"
        - "invalid_name"
        - "no_reaction"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "fatal_error"
    description: "Schema for error response from reactions.remove method"
  files.comments.add schema:
    required:
    - "comment"
    - "ok"
    properties:
      comment:
        $ref: "#/definitions/objs_comment"
      ok:
        type: "boolean"
    description: "Schema for successful response files.comments.add method"
  files.comments.add error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "file_not_found"
        - "file_deleted"
        - "no_comment"
        - "cant_add"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from files.comments.add method"
  im.list success schema:
    required:
    - "ims"
    - "ok"
    properties:
      ims:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_im"
      ok:
        type: "boolean"
    description: "Schema for successful response im.list method"
  im.list error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "invalid_cursor"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response from im.list method"
  dnd.teamInfo success schema:
    required:
    - "ok"
    - "users"
    properties:
      cached:
        type: "boolean"
      ok:
        type: "boolean"
      users:
        type: "object"
        properties: {}
    description: "Schema for successful response from dnd.teamInfo method"
  dnd.teamInfo error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from dnd.teamInfo method"
  users.list schema:
    required:
    - "cache_ts"
    - "members"
    - "ok"
    properties:
      cache_ts:
        type: "integer"
      ok:
        type: "boolean"
      members:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_user"
        minItems: 1
    description: "Schema for successful response from users.list method"
  users.list error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "invalid_cursor"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "fatal_error"
    description: "Schema for error response from users.list method"
  conversations.invite error schema:
    required:
    - "channel"
    - "ok"
    properties:
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_conversation"
    description: "Schema for successful response from conversations.invite method"
  conversations.invite error schema_1_errors:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      user:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "channel_not_found"
        - "user_not_found"
        - "cant_invite_self"
        - "not_in_channel"
        - "already_in_channel"
        - "is_archived"
        - "cant_invite"
        - "too_many_users"
        - "ura_max_channels"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
  conversations.invite error schema_1:
    required:
    - "ok"
    properties:
      provided:
        type: "string"
      errors:
        type: "array"
        title: "errors is returned when an error associates an user"
        uniqueItems: true
        items:
          $ref: "#/definitions/conversations.invite error schema_1_errors"
        minItems: 1
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "channel_not_found"
        - "user_not_found"
        - "cant_invite_self"
        - "not_in_channel"
        - "already_in_channel"
        - "is_archived"
        - "cant_invite"
        - "too_many_users"
        - "ura_max_channels"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
      needed:
        type: "string"
    description: "Schema for error response from conversations.invite method"
  auth.test success schema:
    required:
    - "ok"
    - "team"
    - "team_id"
    - "url"
    - "user"
    - "user_id"
    properties:
      ok:
        type: "boolean"
      url:
        type: "string"
      team_id:
        type: "string"
      user:
        type: "string"
      team:
        type: "string"
      user_id:
        type: "string"
    description: "Schema for successful response auth.test method"
  auth.test error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "not_authed"
        - "invalid_auth"
        - "token_revoked"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response auth.test method"
  channels.list success schema:
    required:
    - "channels"
    - "ok"
    properties:
      channels:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_channel"
        minItems: 1
      ok:
        type: "boolean"
    description: "Schema for successful response channels.list method"
  channels.list error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
    description: "Schema for error response channels.list method"
  channels.invite error schema:
    required:
    - "channel"
    - "ok"
    properties:
      ok:
        type: "boolean"
      channel:
        $ref: "#/definitions/objs_channel"
    description: "Schema for successful response channels.invite method"
  channels.invite error schema_1:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "user_not_found"
        - "cant_invite_self"
        - "not_in_channel"
        - "already_in_channel"
        - "is_archived"
        - "cant_invite"
        - "too_many_users"
        - "ura_max_channels"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
    description: "Schema for error response channels.invite method"
  conversations.replies success schema_replies:
    required:
    - "ts"
    - "user"
    properties:
      ts:
        type: "string"
      user:
        type: "string"
  conversations.replies success schema_messages:
    required:
    - "text"
    - "thread_ts"
    - "ts"
    - "type"
    - "user"
    properties:
      thread_ts:
        type: "string"
      subscribed:
        type: "boolean"
      source_team:
        type: "string"
      last_read:
        type: "string"
      user_profile:
        $ref: "#/definitions/objs_user_profile_short"
      text:
        type: "string"
      team:
        type: "string"
      ts:
        type: "string"
      unread_count:
        type: "integer"
      reply_count:
        type: "integer"
      user:
        type: "string"
      replies:
        type: "array"
        items:
          $ref: "#/definitions/conversations.replies success schema_replies"
      type:
        type: "string"
      user_team:
        type: "string"
      parent_user_id:
        type: "string"
      is_starred:
        type: "boolean"
  conversations.replies success schema:
    required:
    - "messages"
    - "ok"
    properties:
      has_more:
        type: "boolean"
      ok:
        type: "boolean"
      messages:
        type: "array"
        items:
          $ref: "#/definitions/conversations.replies success schema_messages"
    description: "Schema for successful response from conversations.replies method"
  conversations.replies error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "missing_scope"
        - "channel_not_found"
        - "thread_not_found"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.replies method"
  chat.postMessage success schema:
    required:
    - "channel"
    - "message"
    - "ok"
    - "ts"
    properties:
      message:
        $ref: "#/definitions/objs_message"
      ok:
        type: "boolean"
      ts:
        type: "string"
      channel:
        type: "string"
    description: "Schema for successful response of chat.postMessage method"
  chat.postMessage error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "channel_not_found"
        - "not_in_channel"
        - "is_archived"
        - "msg_too_long"
        - "no_text"
        - "too_many_attachments"
        - "rate_limited"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
    description: "Schema for error response chat.postMessage method"
  conversations.archive success schema:
    required:
    - "ok"
    properties:
      ok:
        type: "boolean"
    description: "Schema for successful response conversations.archive method"
  conversations.archive error schema:
    required:
    - "error"
    - "ok"
    properties:
      needed:
        type: "string"
      error:
        type: "string"
        enum:
        - "method_not_supported_for_channel_type"
        - "missing_scope"
        - "not_supported"
        - "channel_not_found"
        - "already_archived"
        - "cant_archive_general"
        - "restricted_action"
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "user_is_bot"
        - "user_is_restricted"
        - "user_is_ultra_restricted"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_type"
        - "missing_post_type"
        - "invalid_json"
        - "json_not_object"
        - "request_timeout"
        - "upgrade_required"
        - "team_added_to_org"
        - "missing_charset"
        - "superfluous_charset"
      ok:
        type: "boolean"
      provided:
        type: "string"
    description: "Schema for error response from conversations.archive method"
  team.profile.get success schema_profile:
    required:
    - "fields"
    properties:
      fields:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_team_profile_field"
        minItems: 1
  team.profile.get success schema:
    required:
    - "ok"
    - "profile"
    properties:
      profile:
        $ref: "#/definitions/team.profile.get success schema_profile"
      ok:
        type: "boolean"
    description: "Schema for successful response from team.profile.get method"
  team.profile.get error schema:
    required:
    - "error"
    - "ok"
    properties:
      ok:
        type: "boolean"
      error:
        type: "string"
        enum:
        - "not_authed"
        - "invalid_auth"
        - "account_inactive"
        - "no_permission"
        - "user_is_bot"
        - "invalid_arg_name"
        - "invalid_array_arg"
        - "invalid_charset"
        - "invalid_form_data"
        - "invalid_post_typ"
        - "missing_post_type"
        - "team_added_to_org"
        - "invalid_json"
        - "json_not_object"
        - "request_timeou"
        - "upgrade_required"
    description: "Schema for error response from team.profile.get method"
  objs_channel_topic:
    required:
    - "creator"
    - "last_set"
    - "value"
    properties:
      last_set:
        type: "integer"
      value:
        type: "string"
      creator:
        type: "string"
  objs_team_icon:
    properties:
      image_230:
        type: "string"
      image_132:
        type: "string"
      image_68:
        type: "string"
      image_34:
        type: "string"
      image_102:
        type: "string"
      image_default:
        type: "boolean"
      image_44:
        type: "string"
      image_88:
        type: "string"
  objs_message_attachments:
    required:
    - "id"
    properties:
      image_bytes:
        type: "integer"
      image_width:
        type: "integer"
      image_height:
        type: "integer"
      image_url:
        type: "string"
      fallback:
        type: "string"
      id:
        type: "integer"
  objs_message_icons:
    properties:
      emoji:
        type: "string"
externalDocs:
  description: "Learn more about the Slack Web API"
  url: "https://api.slack.com/web"
